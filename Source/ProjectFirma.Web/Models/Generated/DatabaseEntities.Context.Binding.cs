
//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Linq;
using CodeFirstStoreFunctions;
using LtInfo.Common.DesignByContract;
using LtInfo.Common.Models;
using ProjectFirma.Web.Common;

namespace ProjectFirma.Web.Models
{
    public partial class DatabaseEntities : DbContext, LtInfo.Common.EntityModelBinding.ILtInfoEntityTypeLoader
    {
        public DatabaseEntities()
            : base("name=DatabaseEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
        public virtual DbSet<AgreementGrantAllocation> AgreementGrantAllocations { get; set; }
        public virtual DbSet<AgreementPerson> AgreementPeople { get; set; }
        public virtual DbSet<AgreementProject> AgreementProjects { get; set; }
        public virtual DbSet<Agreement> Agreements { get; set; }
        public virtual DbSet<AgreementStatus> AgreementStatuses { get; set; }
        public virtual DbSet<AgreementType> AgreementTypes { get; set; }
        public virtual DbSet<ArcOnlineFinanceApiRawJsonImport> ArcOnlineFinanceApiRawJsonImports { get; set; }
        public virtual DbSet<AuditLog> AuditLogs { get; set; }
        public virtual DbSet<Classification> Classifications { get; set; }
        public virtual DbSet<ClassificationSystem> ClassificationSystems { get; set; }
        public virtual DbSet<CostTypeDatamartMapping> CostTypeDatamartMappings { get; set; }
        public virtual DbSet<County> Counties { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<CustomPageImage> CustomPageImages { get; set; }
        public virtual DbSet<CustomPage> CustomPages { get; set; }
        public virtual DbSet<DNRUplandRegionContentImage> DNRUplandRegionContentImages { get; set; }
        public virtual DbSet<DNRUplandRegion> DNRUplandRegions { get; set; }
        public virtual DbSet<ExternalMapLayer> ExternalMapLayers { get; set; }
        public virtual DbSet<FederalFundCode> FederalFundCodes { get; set; }
        public virtual DbSet<FieldDefinitionDataImage> FieldDefinitionDataImages { get; set; }
        public virtual DbSet<FieldDefinitionData> FieldDefinitionDatas { get; set; }
        public virtual DbSet<FileResourceMimeTypeFileExtension> FileResourceMimeTypeFileExtensions { get; set; }
        public virtual DbSet<FileResource> FileResources { get; set; }
        public virtual DbSet<FindYourForesterQuestion> FindYourForesterQuestions { get; set; }
        public virtual DbSet<FirmaHomePageImage> FirmaHomePageImages { get; set; }
        public virtual DbSet<FirmaPageImage> FirmaPageImages { get; set; }
        public virtual DbSet<FirmaPage> FirmaPages { get; set; }
        public virtual DbSet<FocusAreaLocationStaging> FocusAreaLocationStagings { get; set; }
        public virtual DbSet<FocusArea> FocusAreas { get; set; }
        public virtual DbSet<ForesterWorkUnit> ForesterWorkUnits { get; set; }
        public virtual DbSet<GisCrossWalkDefault> GisCrossWalkDefaults { get; set; }
        public virtual DbSet<GisDefaultMapping> GisDefaultMappings { get; set; }
        public virtual DbSet<GisExcludeIncludeColumn> GisExcludeIncludeColumns { get; set; }
        public virtual DbSet<GisExcludeIncludeColumnValue> GisExcludeIncludeColumnValues { get; set; }
        public virtual DbSet<GisFeatureMetadataAttribute> GisFeatureMetadataAttributes { get; set; }
        public virtual DbSet<GisFeature> GisFeatures { get; set; }
        public virtual DbSet<GisMetadataAttribute> GisMetadataAttributes { get; set; }
        public virtual DbSet<GisUploadAttemptGisMetadataAttribute> GisUploadAttemptGisMetadataAttributes { get; set; }
        public virtual DbSet<GisUploadAttempt> GisUploadAttempts { get; set; }
        public virtual DbSet<GisUploadProgramMergeGrouping> GisUploadProgramMergeGroupings { get; set; }
        public virtual DbSet<GisUploadSourceOrganization> GisUploadSourceOrganizations { get; set; }
        public virtual DbSet<GrantAllocationAwardContractorInvoice> GrantAllocationAwardContractorInvoices { get; set; }
        public virtual DbSet<GrantAllocationAwardLandownerCostShareLineItem> GrantAllocationAwardLandownerCostShareLineItems { get; set; }
        public virtual DbSet<GrantAllocationAwardPersonnelAndBenefitsLineItem> GrantAllocationAwardPersonnelAndBenefitsLineItems { get; set; }
        public virtual DbSet<GrantAllocationAward> GrantAllocationAwards { get; set; }
        public virtual DbSet<GrantAllocationAwardSuppliesLineItem> GrantAllocationAwardSuppliesLineItems { get; set; }
        public virtual DbSet<GrantAllocationAwardTravelLineItem> GrantAllocationAwardTravelLineItems { get; set; }
        public virtual DbSet<GrantAllocationBudgetLineItem> GrantAllocationBudgetLineItems { get; set; }
        public virtual DbSet<GrantAllocationChangeLog> GrantAllocationChangeLogs { get; set; }
        public virtual DbSet<GrantAllocationExpenditureJsonStage> GrantAllocationExpenditureJsonStages { get; set; }
        public virtual DbSet<GrantAllocationExpenditure> GrantAllocationExpenditures { get; set; }
        public virtual DbSet<GrantAllocationFileResource> GrantAllocationFileResources { get; set; }
        public virtual DbSet<GrantAllocationLikelyPerson> GrantAllocationLikelyPeople { get; set; }
        public virtual DbSet<GrantAllocationNoteInternal> GrantAllocationNoteInternals { get; set; }
        public virtual DbSet<GrantAllocationNote> GrantAllocationNotes { get; set; }
        public virtual DbSet<GrantAllocationPriority> GrantAllocationPriorities { get; set; }
        public virtual DbSet<GrantAllocationProgramIndexProjectCode> GrantAllocationProgramIndexProjectCodes { get; set; }
        public virtual DbSet<GrantAllocationProgramManager> GrantAllocationProgramManagers { get; set; }
        public virtual DbSet<GrantAllocation> GrantAllocations { get; set; }
        public virtual DbSet<GrantAllocationSource> GrantAllocationSources { get; set; }
        public virtual DbSet<GrantFileResource> GrantFileResources { get; set; }
        public virtual DbSet<GrantModificationFileResource> GrantModificationFileResources { get; set; }
        public virtual DbSet<GrantModificationGrantModificationPurpose> GrantModificationGrantModificationPurposes { get; set; }
        public virtual DbSet<GrantModificationNoteInternal> GrantModificationNoteInternals { get; set; }
        public virtual DbSet<GrantModification> GrantModifications { get; set; }
        public virtual DbSet<GrantModificationStatus> GrantModificationStatuses { get; set; }
        public virtual DbSet<GrantNoteInternal> GrantNoteInternals { get; set; }
        public virtual DbSet<GrantNote> GrantNotes { get; set; }
        public virtual DbSet<Grant> Grants { get; set; }
        public virtual DbSet<GrantType> GrantTypes { get; set; }
        public virtual DbSet<InteractionEventContact> InteractionEventContacts { get; set; }
        public virtual DbSet<InteractionEventFileResource> InteractionEventFileResources { get; set; }
        public virtual DbSet<InteractionEventProject> InteractionEventProjects { get; set; }
        public virtual DbSet<InteractionEvent> InteractionEvents { get; set; }
        public virtual DbSet<InteractionEventType> InteractionEventTypes { get; set; }
        public virtual DbSet<InvoicePaymentRequest> InvoicePaymentRequests { get; set; }
        public virtual DbSet<Invoice> Invoices { get; set; }
        public virtual DbSet<LoaStage> LoaStages { get; set; }
        public virtual DbSet<NotificationProject> NotificationProjects { get; set; }
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<OrganizationBoundaryStaging> OrganizationBoundaryStagings { get; set; }
        public virtual DbSet<OrganizationCode> OrganizationCodes { get; set; }
        public virtual DbSet<Organization> Organizations { get; set; }
        public virtual DbSet<OrganizationTypeRelationshipType> OrganizationTypeRelationshipTypes { get; set; }
        public virtual DbSet<OrganizationType> OrganizationTypes { get; set; }
        public virtual DbSet<Person> People { get; set; }
        public virtual DbSet<PersonAllowedAuthenticator> PersonAllowedAuthenticators { get; set; }
        public virtual DbSet<PersonRole> PersonRoles { get; set; }
        public virtual DbSet<PersonStewardOrganization> PersonStewardOrganizations { get; set; }
        public virtual DbSet<PersonStewardRegion> PersonStewardRegions { get; set; }
        public virtual DbSet<PersonStewardTaxonomyBranch> PersonStewardTaxonomyBranches { get; set; }
        public virtual DbSet<PriorityLandscapeFileResource> PriorityLandscapeFileResources { get; set; }
        public virtual DbSet<PriorityLandscape> PriorityLandscapes { get; set; }
        public virtual DbSet<ProgramIndex> ProgramIndices { get; set; }
        public virtual DbSet<ProgramNotificationConfiguration> ProgramNotificationConfigurations { get; set; }
        public virtual DbSet<ProgramNotificationSentProject> ProgramNotificationSentProjects { get; set; }
        public virtual DbSet<ProgramNotificationSent> ProgramNotificationSents { get; set; }
        public virtual DbSet<ProgramPerson> ProgramPeople { get; set; }
        public virtual DbSet<Program> Programs { get; set; }
        public virtual DbSet<ProjectClassification> ProjectClassifications { get; set; }
        public virtual DbSet<ProjectCode> ProjectCodes { get; set; }
        public virtual DbSet<ProjectCounty> ProjectCounties { get; set; }
        public virtual DbSet<ProjectCountyUpdate> ProjectCountyUpdates { get; set; }
        public virtual DbSet<ProjectDocument> ProjectDocuments { get; set; }
        public virtual DbSet<ProjectDocumentType> ProjectDocumentTypes { get; set; }
        public virtual DbSet<ProjectDocumentUpdate> ProjectDocumentUpdates { get; set; }
        public virtual DbSet<ProjectExemptReportingYear> ProjectExemptReportingYears { get; set; }
        public virtual DbSet<ProjectExemptReportingYearUpdate> ProjectExemptReportingYearUpdates { get; set; }
        public virtual DbSet<ProjectExternalLink> ProjectExternalLinks { get; set; }
        public virtual DbSet<ProjectExternalLinkUpdate> ProjectExternalLinkUpdates { get; set; }
        public virtual DbSet<ProjectFundingSource> ProjectFundingSources { get; set; }
        public virtual DbSet<ProjectFundingSourceUpdate> ProjectFundingSourceUpdates { get; set; }
        public virtual DbSet<ProjectGrantAllocationExpenditure> ProjectGrantAllocationExpenditures { get; set; }
        public virtual DbSet<ProjectGrantAllocationExpenditureUpdate> ProjectGrantAllocationExpenditureUpdates { get; set; }
        public virtual DbSet<ProjectGrantAllocationRequest> ProjectGrantAllocationRequests { get; set; }
        public virtual DbSet<ProjectGrantAllocationRequestUpdate> ProjectGrantAllocationRequestUpdates { get; set; }
        public virtual DbSet<ProjectImage> ProjectImages { get; set; }
        public virtual DbSet<ProjectImageUpdate> ProjectImageUpdates { get; set; }
        public virtual DbSet<ProjectImportBlockList> ProjectImportBlockLists { get; set; }
        public virtual DbSet<ProjectInternalNote> ProjectInternalNotes { get; set; }
        public virtual DbSet<ProjectLocation> ProjectLocations { get; set; }
        public virtual DbSet<ProjectLocationStaging> ProjectLocationStagings { get; set; }
        public virtual DbSet<ProjectLocationStagingUpdate> ProjectLocationStagingUpdates { get; set; }
        public virtual DbSet<ProjectLocationUpdate> ProjectLocationUpdates { get; set; }
        public virtual DbSet<ProjectNote> ProjectNotes { get; set; }
        public virtual DbSet<ProjectNoteUpdate> ProjectNoteUpdates { get; set; }
        public virtual DbSet<ProjectOrganization> ProjectOrganizations { get; set; }
        public virtual DbSet<ProjectOrganizationUpdate> ProjectOrganizationUpdates { get; set; }
        public virtual DbSet<ProjectPerson> ProjectPeople { get; set; }
        public virtual DbSet<ProjectPersonUpdate> ProjectPersonUpdates { get; set; }
        public virtual DbSet<ProjectPriorityLandscape> ProjectPriorityLandscapes { get; set; }
        public virtual DbSet<ProjectPriorityLandscapeUpdate> ProjectPriorityLandscapeUpdates { get; set; }
        public virtual DbSet<ProjectProgram> ProjectPrograms { get; set; }
        public virtual DbSet<ProjectRegion> ProjectRegions { get; set; }
        public virtual DbSet<ProjectRegionUpdate> ProjectRegionUpdates { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<ProjectTag> ProjectTags { get; set; }
        public virtual DbSet<ProjectType> ProjectTypes { get; set; }
        public virtual DbSet<ProjectUpdateBatch> ProjectUpdateBatches { get; set; }
        public virtual DbSet<ProjectUpdateConfiguration> ProjectUpdateConfigurations { get; set; }
        public virtual DbSet<ProjectUpdateHistory> ProjectUpdateHistories { get; set; }
        public virtual DbSet<ProjectUpdateProgram> ProjectUpdatePrograms { get; set; }
        public virtual DbSet<ProjectUpdate> ProjectUpdates { get; set; }
        public virtual DbSet<RelationshipType> RelationshipTypes { get; set; }
        public virtual DbSet<ReportTemplate> ReportTemplates { get; set; }
        public virtual DbSet<SocrataDataMartRawJsonImport> SocrataDataMartRawJsonImports { get; set; }
        public virtual DbSet<StateProvince> StateProvinces { get; set; }
        public virtual DbSet<SupportRequestLog> SupportRequestLogs { get; set; }
        public virtual DbSet<SystemAttribute> SystemAttributes { get; set; }
        public virtual DbSet<TabularDataImport> TabularDataImports { get; set; }
        public virtual DbSet<Tag> Tags { get; set; }
        public virtual DbSet<TaxonomyBranch> TaxonomyBranches { get; set; }
        public virtual DbSet<TaxonomyTrunk> TaxonomyTrunks { get; set; }
        public virtual DbSet<tmpAgreementContact> tmpAgreementContacts { get; set; }
        public virtual DbSet<tmpAgreementContactsImportTemplate> tmpAgreementContactsImportTemplates { get; set; }
        public virtual DbSet<TrainingVideo> TrainingVideos { get; set; }
        public virtual DbSet<TreatmentArea> TreatmentAreas { get; set; }
        public virtual DbSet<TreatmentCode> TreatmentCodes { get; set; }
        public virtual DbSet<Treatment> Treatments { get; set; }
        public virtual DbSet<TreatmentUpdate> TreatmentUpdates { get; set; }
        public virtual DbSet<Vendor> Vendors { get; set; }
        public virtual DbSet<WashingtonLegislativeDistrict> WashingtonLegislativeDistricts { get; set; }
        public virtual DbSet<vArcOnlineRawJsonImportIndex> vArcOnlineRawJsonImportIndices { get; set; }
        public virtual DbSet<vGeoServerCounty> vGeoServerCounties { get; set; }
        public virtual DbSet<vGeoServerPriorityLandscape> vGeoServerPriorityLandscapes { get; set; }
        public virtual DbSet<vLoaStageGrantAllocationAward> vLoaStageGrantAllocationAwards { get; set; }
        public virtual DbSet<vLoaStageGrantAllocationByProgramIndexProjectCode> vLoaStageGrantAllocationByProgramIndexProjectCodes { get; set; }
        public virtual DbSet<vLoaStageGrantAllocation> vLoaStageGrantAllocations { get; set; }
        public virtual DbSet<vLoaStageProjectGrantAllocation> vLoaStageProjectGrantAllocations { get; set; }
        public virtual DbSet<vSingularGrantAllocation> vSingularGrantAllocations { get; set; }
        public virtual DbSet<vSocrataDataMartRawJsonImportIndex> vSocrataDataMartRawJsonImportIndices { get; set; }
        public virtual DbSet<vTotalTreatedAcresByProject> vTotalTreatedAcresByProjects { get; set; }
        public virtual DbSet<fGetBoundingBoxForProjectIdList_Result> fGetBoundingBoxForProjectIdListResults { get; set; }
        public virtual DbSet<fGetColumnNamesForTable_Result> fGetColumnNamesForTableResults { get; set; }
        public virtual DbSet<fGetProjectDnrUploadRegion_Result> fGetProjectDnrUploadRegionResults { get; set; }
        public virtual DbSet<fGetProjectPriorityLandscape_Result> fGetProjectPriorityLandscapeResults { get; set; }
        public virtual DbSet<fGetUploadProgramCounty_Result> fGetUploadProgramCountyResults { get; set; }
        public virtual DbSet<fnSplitString_Result> fnSplitStringResults { get; set; }

        [DbFunction("DatabaseEntities", "fGetBoundingBoxForProjectIdList")]
        public virtual IQueryable<fGetBoundingBoxForProjectIdList_Result> GetfGetBoundingBoxForProjectIdLists(string projectIDListParameter)
        {
            
            var projectIDList = new System.Data.Entity.Core.Objects.ObjectParameter("projectIDList", typeof(string))
            {
                Value = projectIDListParameter
            };
            return (this as System.Data.Entity.Infrastructure.IObjectContextAdapter).ObjectContext
                  .CreateQuery<fGetBoundingBoxForProjectIdList_Result>("DatabaseEntities.fGetBoundingBoxForProjectIdList(@ProjectIDList)",projectIDList);
        }

        [DbFunction("DatabaseEntities", "fGetColumnNamesForTable")]
        public virtual IQueryable<fGetColumnNamesForTable_Result> GetfGetColumnNamesForTables(string psTableNameParameter)
        {
            
            var psTableName = new System.Data.Entity.Core.Objects.ObjectParameter("psTableName", typeof(string))
            {
                Value = psTableNameParameter
            };
            return (this as System.Data.Entity.Infrastructure.IObjectContextAdapter).ObjectContext
                  .CreateQuery<fGetColumnNamesForTable_Result>("DatabaseEntities.fGetColumnNamesForTable(@psTableName)",psTableName);
        }

        [DbFunction("DatabaseEntities", "fGetProjectDnrUploadRegion")]
        public virtual IQueryable<fGetProjectDnrUploadRegion_Result> GetfGetProjectDnrUploadRegions(int? piGisUploadAttemptIDParameter, int? piGisMetadataAttributeIDParameter, int? programIDParameter)
        {
            
            var piGisUploadAttemptID = new System.Data.Entity.Core.Objects.ObjectParameter("piGisUploadAttemptID", typeof(int?))
            {
                Value = piGisUploadAttemptIDParameter
            };

            var piGisMetadataAttributeID = new System.Data.Entity.Core.Objects.ObjectParameter("piGisMetadataAttributeID", typeof(int?))
            {
                Value = piGisMetadataAttributeIDParameter
            };

            var programID = new System.Data.Entity.Core.Objects.ObjectParameter("programID", typeof(int?))
            {
                Value = programIDParameter
            };
            return (this as System.Data.Entity.Infrastructure.IObjectContextAdapter).ObjectContext
                  .CreateQuery<fGetProjectDnrUploadRegion_Result>("DatabaseEntities.fGetProjectDnrUploadRegion(@piGisUploadAttemptID, @piGisMetadataAttributeID, @programID)",piGisUploadAttemptID, piGisMetadataAttributeID, programID);
        }

        [DbFunction("DatabaseEntities", "fGetProjectPriorityLandscape")]
        public virtual IQueryable<fGetProjectPriorityLandscape_Result> GetfGetProjectPriorityLandscapes(int? piGisUploadAttemptIDParameter, int? piGisMetadataAttributeIDParameter, int? programIDParameter)
        {
            
            var piGisUploadAttemptID = new System.Data.Entity.Core.Objects.ObjectParameter("piGisUploadAttemptID", typeof(int?))
            {
                Value = piGisUploadAttemptIDParameter
            };

            var piGisMetadataAttributeID = new System.Data.Entity.Core.Objects.ObjectParameter("piGisMetadataAttributeID", typeof(int?))
            {
                Value = piGisMetadataAttributeIDParameter
            };

            var programID = new System.Data.Entity.Core.Objects.ObjectParameter("programID", typeof(int?))
            {
                Value = programIDParameter
            };
            return (this as System.Data.Entity.Infrastructure.IObjectContextAdapter).ObjectContext
                  .CreateQuery<fGetProjectPriorityLandscape_Result>("DatabaseEntities.fGetProjectPriorityLandscape(@piGisUploadAttemptID, @piGisMetadataAttributeID, @programID)",piGisUploadAttemptID, piGisMetadataAttributeID, programID);
        }

        [DbFunction("DatabaseEntities", "fGetUploadProgramCounty")]
        public virtual IQueryable<fGetUploadProgramCounty_Result> GetfGetUploadProgramCountys(int? piGisUploadAttemptIDParameter, int? piGisMetadataAttributeIDParameter, int? programIDParameter)
        {
            
            var piGisUploadAttemptID = new System.Data.Entity.Core.Objects.ObjectParameter("piGisUploadAttemptID", typeof(int?))
            {
                Value = piGisUploadAttemptIDParameter
            };

            var piGisMetadataAttributeID = new System.Data.Entity.Core.Objects.ObjectParameter("piGisMetadataAttributeID", typeof(int?))
            {
                Value = piGisMetadataAttributeIDParameter
            };

            var programID = new System.Data.Entity.Core.Objects.ObjectParameter("programID", typeof(int?))
            {
                Value = programIDParameter
            };
            return (this as System.Data.Entity.Infrastructure.IObjectContextAdapter).ObjectContext
                  .CreateQuery<fGetUploadProgramCounty_Result>("DatabaseEntities.fGetUploadProgramCounty(@piGisUploadAttemptID, @piGisMetadataAttributeID, @programID)",piGisUploadAttemptID, piGisMetadataAttributeID, programID);
        }

        [DbFunction("DatabaseEntities", "fnSplitString")]
        public virtual IQueryable<fnSplitString_Result> GetfnSplitStrings(string stringToSplitParameter, string delimiterParameter)
        {
            
            var stringToSplit = new System.Data.Entity.Core.Objects.ObjectParameter("stringToSplit", typeof(string))
            {
                Value = stringToSplitParameter
            };

            var delimiter = new System.Data.Entity.Core.Objects.ObjectParameter("delimiter", typeof(string))
            {
                Value = delimiterParameter
            };
            return (this as System.Data.Entity.Infrastructure.IObjectContextAdapter).ObjectContext
                  .CreateQuery<fnSplitString_Result>("DatabaseEntities.fnSplitString(@stringToSplit, @delimiter)",stringToSplit, delimiter);
        }

        public object LoadType(Type type, int primaryKey)
        {
            switch (type.Name)
            {
                case "ActivityType":
                    var activityType = ActivityType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(activityType, "ActivityType", primaryKey);
                    return activityType;

                case "AgreementGrantAllocation":
                    return AgreementGrantAllocations.GetAgreementGrantAllocation(primaryKey);

                case "AgreementPerson":
                    return AgreementPeople.GetAgreementPerson(primaryKey);

                case "AgreementPersonRole":
                    var agreementPersonRole = AgreementPersonRole.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(agreementPersonRole, "AgreementPersonRole", primaryKey);
                    return agreementPersonRole;

                case "AgreementProject":
                    return AgreementProjects.GetAgreementProject(primaryKey);

                case "Agreement":
                    return Agreements.GetAgreement(primaryKey);

                case "AgreementStatus":
                    return AgreementStatuses.GetAgreementStatus(primaryKey);

                case "AgreementType":
                    return AgreementTypes.GetAgreementType(primaryKey);

                case "ArcOnlineFinanceApiRawJsonImport":
                    return ArcOnlineFinanceApiRawJsonImports.GetArcOnlineFinanceApiRawJsonImport(primaryKey);

                case "ArcOnlineFinanceApiRawJsonImportTableType":
                    var arcOnlineFinanceApiRawJsonImportTableType = ArcOnlineFinanceApiRawJsonImportTableType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(arcOnlineFinanceApiRawJsonImportTableType, "ArcOnlineFinanceApiRawJsonImportTableType", primaryKey);
                    return arcOnlineFinanceApiRawJsonImportTableType;

                case "AuditLogEventType":
                    var auditLogEventType = AuditLogEventType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(auditLogEventType, "AuditLogEventType", primaryKey);
                    return auditLogEventType;

                case "AuditLog":
                    return AuditLogs.GetAuditLog(primaryKey);

                case "Authenticator":
                    var authenticator = Authenticator.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(authenticator, "Authenticator", primaryKey);
                    return authenticator;

                case "Classification":
                    return Classifications.GetClassification(primaryKey);

                case "ClassificationSystem":
                    return ClassificationSystems.GetClassificationSystem(primaryKey);

                case "CostTypeDatamartMapping":
                    return CostTypeDatamartMappings.GetCostTypeDatamartMapping(primaryKey);

                case "CostType":
                    var costType = CostType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(costType, "CostType", primaryKey);
                    return costType;

                case "County":
                    return Counties.GetCounty(primaryKey);

                case "Country":
                    return Countries.GetCountry(primaryKey);

                case "CustomPageDisplayType":
                    var customPageDisplayType = CustomPageDisplayType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(customPageDisplayType, "CustomPageDisplayType", primaryKey);
                    return customPageDisplayType;

                case "CustomPageImage":
                    return CustomPageImages.GetCustomPageImage(primaryKey);

                case "CustomPageNavigationSection":
                    var customPageNavigationSection = CustomPageNavigationSection.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(customPageNavigationSection, "CustomPageNavigationSection", primaryKey);
                    return customPageNavigationSection;

                case "CustomPage":
                    return CustomPages.GetCustomPage(primaryKey);

                case "Division":
                    var division = Division.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(division, "Division", primaryKey);
                    return division;

                case "DNRUplandRegionContentImage":
                    return DNRUplandRegionContentImages.GetDNRUplandRegionContentImage(primaryKey);

                case "DNRUplandRegion":
                    return DNRUplandRegions.GetDNRUplandRegion(primaryKey);

                case "ExternalMapLayer":
                    return ExternalMapLayers.GetExternalMapLayer(primaryKey);

                case "FederalFundCode":
                    return FederalFundCodes.GetFederalFundCode(primaryKey);

                case "FieldDefinitionDataImage":
                    return FieldDefinitionDataImages.GetFieldDefinitionDataImage(primaryKey);

                case "FieldDefinitionData":
                    return FieldDefinitionDatas.GetFieldDefinitionData(primaryKey);

                case "FieldDefinition":
                    var fieldDefinition = FieldDefinition.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(fieldDefinition, "FieldDefinition", primaryKey);
                    return fieldDefinition;

                case "FileResourceMimeTypeFileExtension":
                    return FileResourceMimeTypeFileExtensions.GetFileResourceMimeTypeFileExtension(primaryKey);

                case "FileResourceMimeType":
                    var fileResourceMimeType = FileResourceMimeType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(fileResourceMimeType, "FileResourceMimeType", primaryKey);
                    return fileResourceMimeType;

                case "FileResource":
                    return FileResources.GetFileResource(primaryKey);

                case "FindYourForesterQuestion":
                    return FindYourForesterQuestions.GetFindYourForesterQuestion(primaryKey);

                case "FirmaHomePageImage":
                    return FirmaHomePageImages.GetFirmaHomePageImage(primaryKey);

                case "FirmaPageImage":
                    return FirmaPageImages.GetFirmaPageImage(primaryKey);

                case "FirmaPageRenderType":
                    var firmaPageRenderType = FirmaPageRenderType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(firmaPageRenderType, "FirmaPageRenderType", primaryKey);
                    return firmaPageRenderType;

                case "FirmaPage":
                    return FirmaPages.GetFirmaPage(primaryKey);

                case "FirmaPageType":
                    var firmaPageType = FirmaPageType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(firmaPageType, "FirmaPageType", primaryKey);
                    return firmaPageType;

                case "FocusAreaLocationStaging":
                    return FocusAreaLocationStagings.GetFocusAreaLocationStaging(primaryKey);

                case "FocusArea":
                    return FocusAreas.GetFocusArea(primaryKey);

                case "FocusAreaStatus":
                    var focusAreaStatus = FocusAreaStatus.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(focusAreaStatus, "FocusAreaStatus", primaryKey);
                    return focusAreaStatus;

                case "ForesterRole":
                    var foresterRole = ForesterRole.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(foresterRole, "ForesterRole", primaryKey);
                    return foresterRole;

                case "ForesterWorkUnit":
                    return ForesterWorkUnits.GetForesterWorkUnit(primaryKey);

                case "FundingSource":
                    var fundingSource = FundingSource.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(fundingSource, "FundingSource", primaryKey);
                    return fundingSource;

                case "GisCrossWalkDefault":
                    return GisCrossWalkDefaults.GetGisCrossWalkDefault(primaryKey);

                case "GisDefaultMapping":
                    return GisDefaultMappings.GetGisDefaultMapping(primaryKey);

                case "GisExcludeIncludeColumn":
                    return GisExcludeIncludeColumns.GetGisExcludeIncludeColumn(primaryKey);

                case "GisExcludeIncludeColumnValue":
                    return GisExcludeIncludeColumnValues.GetGisExcludeIncludeColumnValue(primaryKey);

                case "GisFeatureMetadataAttribute":
                    return GisFeatureMetadataAttributes.GetGisFeatureMetadataAttribute(primaryKey);

                case "GisFeature":
                    return GisFeatures.GetGisFeature(primaryKey);

                case "GisMetadataAttribute":
                    return GisMetadataAttributes.GetGisMetadataAttribute(primaryKey);

                case "GisUploadAttemptGisMetadataAttribute":
                    return GisUploadAttemptGisMetadataAttributes.GetGisUploadAttemptGisMetadataAttribute(primaryKey);

                case "GisUploadAttempt":
                    return GisUploadAttempts.GetGisUploadAttempt(primaryKey);

                case "GisUploadAttemptWorkflowSectionGrouping":
                    var gisUploadAttemptWorkflowSectionGrouping = GisUploadAttemptWorkflowSectionGrouping.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(gisUploadAttemptWorkflowSectionGrouping, "GisUploadAttemptWorkflowSectionGrouping", primaryKey);
                    return gisUploadAttemptWorkflowSectionGrouping;

                case "GisUploadAttemptWorkflowSection":
                    var gisUploadAttemptWorkflowSection = GisUploadAttemptWorkflowSection.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(gisUploadAttemptWorkflowSection, "GisUploadAttemptWorkflowSection", primaryKey);
                    return gisUploadAttemptWorkflowSection;

                case "GisUploadProgramMergeGrouping":
                    return GisUploadProgramMergeGroupings.GetGisUploadProgramMergeGrouping(primaryKey);

                case "GisUploadSourceOrganization":
                    return GisUploadSourceOrganizations.GetGisUploadSourceOrganization(primaryKey);

                case "GoogleChartType":
                    var googleChartType = GoogleChartType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(googleChartType, "GoogleChartType", primaryKey);
                    return googleChartType;

                case "GrantAllocationAwardContractorInvoice":
                    return GrantAllocationAwardContractorInvoices.GetGrantAllocationAwardContractorInvoice(primaryKey);

                case "GrantAllocationAwardContractorInvoiceType":
                    var grantAllocationAwardContractorInvoiceType = GrantAllocationAwardContractorInvoiceType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(grantAllocationAwardContractorInvoiceType, "GrantAllocationAwardContractorInvoiceType", primaryKey);
                    return grantAllocationAwardContractorInvoiceType;

                case "GrantAllocationAwardLandownerCostShareLineItem":
                    return GrantAllocationAwardLandownerCostShareLineItems.GetGrantAllocationAwardLandownerCostShareLineItem(primaryKey);

                case "GrantAllocationAwardPersonnelAndBenefitsLineItem":
                    return GrantAllocationAwardPersonnelAndBenefitsLineItems.GetGrantAllocationAwardPersonnelAndBenefitsLineItem(primaryKey);

                case "GrantAllocationAward":
                    return GrantAllocationAwards.GetGrantAllocationAward(primaryKey);

                case "GrantAllocationAwardSuppliesLineItem":
                    return GrantAllocationAwardSuppliesLineItems.GetGrantAllocationAwardSuppliesLineItem(primaryKey);

                case "GrantAllocationAwardTravelLineItem":
                    return GrantAllocationAwardTravelLineItems.GetGrantAllocationAwardTravelLineItem(primaryKey);

                case "GrantAllocationAwardTravelLineItemType":
                    var grantAllocationAwardTravelLineItemType = GrantAllocationAwardTravelLineItemType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(grantAllocationAwardTravelLineItemType, "GrantAllocationAwardTravelLineItemType", primaryKey);
                    return grantAllocationAwardTravelLineItemType;

                case "GrantAllocationBudgetLineItem":
                    return GrantAllocationBudgetLineItems.GetGrantAllocationBudgetLineItem(primaryKey);

                case "GrantAllocationChangeLog":
                    return GrantAllocationChangeLogs.GetGrantAllocationChangeLog(primaryKey);

                case "GrantAllocationExpenditureJsonStage":
                    return GrantAllocationExpenditureJsonStages.GetGrantAllocationExpenditureJsonStage(primaryKey);

                case "GrantAllocationExpenditure":
                    return GrantAllocationExpenditures.GetGrantAllocationExpenditure(primaryKey);

                case "GrantAllocationFileResource":
                    return GrantAllocationFileResources.GetGrantAllocationFileResource(primaryKey);

                case "GrantAllocationLikelyPerson":
                    return GrantAllocationLikelyPeople.GetGrantAllocationLikelyPerson(primaryKey);

                case "GrantAllocationNoteInternal":
                    return GrantAllocationNoteInternals.GetGrantAllocationNoteInternal(primaryKey);

                case "GrantAllocationNote":
                    return GrantAllocationNotes.GetGrantAllocationNote(primaryKey);

                case "GrantAllocationPriority":
                    return GrantAllocationPriorities.GetGrantAllocationPriority(primaryKey);

                case "GrantAllocationProgramIndexProjectCode":
                    return GrantAllocationProgramIndexProjectCodes.GetGrantAllocationProgramIndexProjectCode(primaryKey);

                case "GrantAllocationProgramManager":
                    return GrantAllocationProgramManagers.GetGrantAllocationProgramManager(primaryKey);

                case "GrantAllocation":
                    return GrantAllocations.GetGrantAllocation(primaryKey);

                case "GrantAllocationSource":
                    return GrantAllocationSources.GetGrantAllocationSource(primaryKey);

                case "GrantFileResource":
                    return GrantFileResources.GetGrantFileResource(primaryKey);

                case "GrantModificationFileResource":
                    return GrantModificationFileResources.GetGrantModificationFileResource(primaryKey);

                case "GrantModificationGrantModificationPurpose":
                    return GrantModificationGrantModificationPurposes.GetGrantModificationGrantModificationPurpose(primaryKey);

                case "GrantModificationNoteInternal":
                    return GrantModificationNoteInternals.GetGrantModificationNoteInternal(primaryKey);

                case "GrantModificationPurpose":
                    var grantModificationPurpose = GrantModificationPurpose.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(grantModificationPurpose, "GrantModificationPurpose", primaryKey);
                    return grantModificationPurpose;

                case "GrantModification":
                    return GrantModifications.GetGrantModification(primaryKey);

                case "GrantModificationStatus":
                    return GrantModificationStatuses.GetGrantModificationStatus(primaryKey);

                case "GrantNoteInternal":
                    return GrantNoteInternals.GetGrantNoteInternal(primaryKey);

                case "GrantNote":
                    return GrantNotes.GetGrantNote(primaryKey);

                case "Grant":
                    return Grants.GetGrant(primaryKey);

                case "GrantStatus":
                    var grantStatus = GrantStatus.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(grantStatus, "GrantStatus", primaryKey);
                    return grantStatus;

                case "GrantType":
                    return GrantTypes.GetGrantType(primaryKey);

                case "InteractionEventContact":
                    return InteractionEventContacts.GetInteractionEventContact(primaryKey);

                case "InteractionEventFileResource":
                    return InteractionEventFileResources.GetInteractionEventFileResource(primaryKey);

                case "InteractionEventProject":
                    return InteractionEventProjects.GetInteractionEventProject(primaryKey);

                case "InteractionEvent":
                    return InteractionEvents.GetInteractionEvent(primaryKey);

                case "InteractionEventType":
                    return InteractionEventTypes.GetInteractionEventType(primaryKey);

                case "InvoiceApprovalStatus":
                    var invoiceApprovalStatus = InvoiceApprovalStatus.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(invoiceApprovalStatus, "InvoiceApprovalStatus", primaryKey);
                    return invoiceApprovalStatus;

                case "InvoiceMatchAmountType":
                    var invoiceMatchAmountType = InvoiceMatchAmountType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(invoiceMatchAmountType, "InvoiceMatchAmountType", primaryKey);
                    return invoiceMatchAmountType;

                case "InvoicePaymentRequest":
                    return InvoicePaymentRequests.GetInvoicePaymentRequest(primaryKey);

                case "Invoice":
                    return Invoices.GetInvoice(primaryKey);

                case "InvoiceStatus":
                    var invoiceStatus = InvoiceStatus.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(invoiceStatus, "InvoiceStatus", primaryKey);
                    return invoiceStatus;

                case "JsonImportStatusType":
                    var jsonImportStatusType = JsonImportStatusType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(jsonImportStatusType, "JsonImportStatusType", primaryKey);
                    return jsonImportStatusType;

                case "LandownerCostShareLineItemStatus":
                    var landownerCostShareLineItemStatus = LandownerCostShareLineItemStatus.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(landownerCostShareLineItemStatus, "LandownerCostShareLineItemStatus", primaryKey);
                    return landownerCostShareLineItemStatus;

                case "LoaStage":
                    return LoaStages.GetLoaStage(primaryKey);

                case "MeasurementUnitType":
                    var measurementUnitType = MeasurementUnitType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(measurementUnitType, "MeasurementUnitType", primaryKey);
                    return measurementUnitType;

                case "NotificationProject":
                    return NotificationProjects.GetNotificationProject(primaryKey);

                case "Notification":
                    return Notifications.GetNotification(primaryKey);

                case "NotificationType":
                    var notificationType = NotificationType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(notificationType, "NotificationType", primaryKey);
                    return notificationType;

                case "OrganizationBoundaryStaging":
                    return OrganizationBoundaryStagings.GetOrganizationBoundaryStaging(primaryKey);

                case "OrganizationCode":
                    return OrganizationCodes.GetOrganizationCode(primaryKey);

                case "Organization":
                    return Organizations.GetOrganization(primaryKey);

                case "OrganizationTypeRelationshipType":
                    return OrganizationTypeRelationshipTypes.GetOrganizationTypeRelationshipType(primaryKey);

                case "OrganizationType":
                    return OrganizationTypes.GetOrganizationType(primaryKey);

                case "Person":
                    return People.GetPerson(primaryKey);

                case "PersonAllowedAuthenticator":
                    return PersonAllowedAuthenticators.GetPersonAllowedAuthenticator(primaryKey);

                case "PersonRole":
                    return PersonRoles.GetPersonRole(primaryKey);

                case "PersonStewardOrganization":
                    return PersonStewardOrganizations.GetPersonStewardOrganization(primaryKey);

                case "PersonStewardRegion":
                    return PersonStewardRegions.GetPersonStewardRegion(primaryKey);

                case "PersonStewardTaxonomyBranch":
                    return PersonStewardTaxonomyBranches.GetPersonStewardTaxonomyBranch(primaryKey);

                case "PriorityLandscapeCategory":
                    var priorityLandscapeCategory = PriorityLandscapeCategory.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(priorityLandscapeCategory, "PriorityLandscapeCategory", primaryKey);
                    return priorityLandscapeCategory;

                case "PriorityLandscapeFileResource":
                    return PriorityLandscapeFileResources.GetPriorityLandscapeFileResource(primaryKey);

                case "PriorityLandscape":
                    return PriorityLandscapes.GetPriorityLandscape(primaryKey);

                case "ProgramIndex":
                    return ProgramIndices.GetProgramIndex(primaryKey);

                case "ProgramNotificationConfiguration":
                    return ProgramNotificationConfigurations.GetProgramNotificationConfiguration(primaryKey);

                case "ProgramNotificationSentProject":
                    return ProgramNotificationSentProjects.GetProgramNotificationSentProject(primaryKey);

                case "ProgramNotificationSent":
                    return ProgramNotificationSents.GetProgramNotificationSent(primaryKey);

                case "ProgramNotificationType":
                    var programNotificationType = ProgramNotificationType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(programNotificationType, "ProgramNotificationType", primaryKey);
                    return programNotificationType;

                case "ProgramPerson":
                    return ProgramPeople.GetProgramPerson(primaryKey);

                case "Program":
                    return Programs.GetProgram(primaryKey);

                case "ProjectApprovalStatus":
                    var projectApprovalStatus = ProjectApprovalStatus.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(projectApprovalStatus, "ProjectApprovalStatus", primaryKey);
                    return projectApprovalStatus;

                case "ProjectClassification":
                    return ProjectClassifications.GetProjectClassification(primaryKey);

                case "ProjectCode":
                    return ProjectCodes.GetProjectCode(primaryKey);

                case "ProjectColorByType":
                    var projectColorByType = ProjectColorByType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(projectColorByType, "ProjectColorByType", primaryKey);
                    return projectColorByType;

                case "ProjectCostType":
                    var projectCostType = ProjectCostType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(projectCostType, "ProjectCostType", primaryKey);
                    return projectCostType;

                case "ProjectCounty":
                    return ProjectCounties.GetProjectCounty(primaryKey);

                case "ProjectCountyUpdate":
                    return ProjectCountyUpdates.GetProjectCountyUpdate(primaryKey);

                case "ProjectCreateSection":
                    var projectCreateSection = ProjectCreateSection.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(projectCreateSection, "ProjectCreateSection", primaryKey);
                    return projectCreateSection;

                case "ProjectDocument":
                    return ProjectDocuments.GetProjectDocument(primaryKey);

                case "ProjectDocumentType":
                    return ProjectDocumentTypes.GetProjectDocumentType(primaryKey);

                case "ProjectDocumentUpdate":
                    return ProjectDocumentUpdates.GetProjectDocumentUpdate(primaryKey);

                case "ProjectExemptReportingType":
                    var projectExemptReportingType = ProjectExemptReportingType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(projectExemptReportingType, "ProjectExemptReportingType", primaryKey);
                    return projectExemptReportingType;

                case "ProjectExemptReportingYear":
                    return ProjectExemptReportingYears.GetProjectExemptReportingYear(primaryKey);

                case "ProjectExemptReportingYearUpdate":
                    return ProjectExemptReportingYearUpdates.GetProjectExemptReportingYearUpdate(primaryKey);

                case "ProjectExternalLink":
                    return ProjectExternalLinks.GetProjectExternalLink(primaryKey);

                case "ProjectExternalLinkUpdate":
                    return ProjectExternalLinkUpdates.GetProjectExternalLinkUpdate(primaryKey);

                case "ProjectFundingSource":
                    return ProjectFundingSources.GetProjectFundingSource(primaryKey);

                case "ProjectFundingSourceUpdate":
                    return ProjectFundingSourceUpdates.GetProjectFundingSourceUpdate(primaryKey);

                case "ProjectGrantAllocationExpenditure":
                    return ProjectGrantAllocationExpenditures.GetProjectGrantAllocationExpenditure(primaryKey);

                case "ProjectGrantAllocationExpenditureUpdate":
                    return ProjectGrantAllocationExpenditureUpdates.GetProjectGrantAllocationExpenditureUpdate(primaryKey);

                case "ProjectGrantAllocationRequest":
                    return ProjectGrantAllocationRequests.GetProjectGrantAllocationRequest(primaryKey);

                case "ProjectGrantAllocationRequestUpdate":
                    return ProjectGrantAllocationRequestUpdates.GetProjectGrantAllocationRequestUpdate(primaryKey);

                case "ProjectImage":
                    return ProjectImages.GetProjectImage(primaryKey);

                case "ProjectImageTiming":
                    var projectImageTiming = ProjectImageTiming.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(projectImageTiming, "ProjectImageTiming", primaryKey);
                    return projectImageTiming;

                case "ProjectImageUpdate":
                    return ProjectImageUpdates.GetProjectImageUpdate(primaryKey);

                case "ProjectImportBlockList":
                    return ProjectImportBlockLists.GetProjectImportBlockList(primaryKey);

                case "ProjectInternalNote":
                    return ProjectInternalNotes.GetProjectInternalNote(primaryKey);

                case "ProjectLocationFilterType":
                    var projectLocationFilterType = ProjectLocationFilterType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(projectLocationFilterType, "ProjectLocationFilterType", primaryKey);
                    return projectLocationFilterType;

                case "ProjectLocation":
                    return ProjectLocations.GetProjectLocation(primaryKey);

                case "ProjectLocationSimpleType":
                    var projectLocationSimpleType = ProjectLocationSimpleType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(projectLocationSimpleType, "ProjectLocationSimpleType", primaryKey);
                    return projectLocationSimpleType;

                case "ProjectLocationStaging":
                    return ProjectLocationStagings.GetProjectLocationStaging(primaryKey);

                case "ProjectLocationStagingUpdate":
                    return ProjectLocationStagingUpdates.GetProjectLocationStagingUpdate(primaryKey);

                case "ProjectLocationType":
                    var projectLocationType = ProjectLocationType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(projectLocationType, "ProjectLocationType", primaryKey);
                    return projectLocationType;

                case "ProjectLocationUpdate":
                    return ProjectLocationUpdates.GetProjectLocationUpdate(primaryKey);

                case "ProjectNote":
                    return ProjectNotes.GetProjectNote(primaryKey);

                case "ProjectNoteUpdate":
                    return ProjectNoteUpdates.GetProjectNoteUpdate(primaryKey);

                case "ProjectOrganization":
                    return ProjectOrganizations.GetProjectOrganization(primaryKey);

                case "ProjectOrganizationUpdate":
                    return ProjectOrganizationUpdates.GetProjectOrganizationUpdate(primaryKey);

                case "ProjectPerson":
                    return ProjectPeople.GetProjectPerson(primaryKey);

                case "ProjectPersonRelationshipType":
                    var projectPersonRelationshipType = ProjectPersonRelationshipType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(projectPersonRelationshipType, "ProjectPersonRelationshipType", primaryKey);
                    return projectPersonRelationshipType;

                case "ProjectPersonUpdate":
                    return ProjectPersonUpdates.GetProjectPersonUpdate(primaryKey);

                case "ProjectPriorityLandscape":
                    return ProjectPriorityLandscapes.GetProjectPriorityLandscape(primaryKey);

                case "ProjectPriorityLandscapeUpdate":
                    return ProjectPriorityLandscapeUpdates.GetProjectPriorityLandscapeUpdate(primaryKey);

                case "ProjectProgram":
                    return ProjectPrograms.GetProjectProgram(primaryKey);

                case "ProjectRegion":
                    return ProjectRegions.GetProjectRegion(primaryKey);

                case "ProjectRegionUpdate":
                    return ProjectRegionUpdates.GetProjectRegionUpdate(primaryKey);

                case "Project":
                    return Projects.GetProject(primaryKey);

                case "ProjectStage":
                    var projectStage = ProjectStage.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(projectStage, "ProjectStage", primaryKey);
                    return projectStage;

                case "ProjectStewardshipAreaType":
                    var projectStewardshipAreaType = ProjectStewardshipAreaType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(projectStewardshipAreaType, "ProjectStewardshipAreaType", primaryKey);
                    return projectStewardshipAreaType;

                case "ProjectTag":
                    return ProjectTags.GetProjectTag(primaryKey);

                case "ProjectType":
                    return ProjectTypes.GetProjectType(primaryKey);

                case "ProjectUpdateBatch":
                    return ProjectUpdateBatches.GetProjectUpdateBatch(primaryKey);

                case "ProjectUpdateConfiguration":
                    return ProjectUpdateConfigurations.GetProjectUpdateConfiguration(primaryKey);

                case "ProjectUpdateHistory":
                    return ProjectUpdateHistories.GetProjectUpdateHistory(primaryKey);

                case "ProjectUpdateProgram":
                    return ProjectUpdatePrograms.GetProjectUpdateProgram(primaryKey);

                case "ProjectUpdate":
                    return ProjectUpdates.GetProjectUpdate(primaryKey);

                case "ProjectUpdateSection":
                    var projectUpdateSection = ProjectUpdateSection.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(projectUpdateSection, "ProjectUpdateSection", primaryKey);
                    return projectUpdateSection;

                case "ProjectUpdateState":
                    var projectUpdateState = ProjectUpdateState.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(projectUpdateState, "ProjectUpdateState", primaryKey);
                    return projectUpdateState;

                case "ProjectWorkflowSectionGrouping":
                    var projectWorkflowSectionGrouping = ProjectWorkflowSectionGrouping.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(projectWorkflowSectionGrouping, "ProjectWorkflowSectionGrouping", primaryKey);
                    return projectWorkflowSectionGrouping;

                case "RecurrenceInterval":
                    var recurrenceInterval = RecurrenceInterval.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(recurrenceInterval, "RecurrenceInterval", primaryKey);
                    return recurrenceInterval;

                case "RelationshipType":
                    return RelationshipTypes.GetRelationshipType(primaryKey);

                case "ReportTemplateModel":
                    var reportTemplateModel = ReportTemplateModel.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(reportTemplateModel, "ReportTemplateModel", primaryKey);
                    return reportTemplateModel;

                case "ReportTemplateModelType":
                    var reportTemplateModelType = ReportTemplateModelType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(reportTemplateModelType, "ReportTemplateModelType", primaryKey);
                    return reportTemplateModelType;

                case "ReportTemplate":
                    return ReportTemplates.GetReportTemplate(primaryKey);

                case "Role":
                    var role = Role.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(role, "Role", primaryKey);
                    return role;

                case "SocrataDataMartRawJsonImport":
                    return SocrataDataMartRawJsonImports.GetSocrataDataMartRawJsonImport(primaryKey);

                case "SocrataDataMartRawJsonImportTableType":
                    var socrataDataMartRawJsonImportTableType = SocrataDataMartRawJsonImportTableType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(socrataDataMartRawJsonImportTableType, "SocrataDataMartRawJsonImportTableType", primaryKey);
                    return socrataDataMartRawJsonImportTableType;

                case "StateProvince":
                    return StateProvinces.GetStateProvince(primaryKey);

                case "SupportRequestLog":
                    return SupportRequestLogs.GetSupportRequestLog(primaryKey);

                case "SupportRequestType":
                    var supportRequestType = SupportRequestType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(supportRequestType, "SupportRequestType", primaryKey);
                    return supportRequestType;

                case "SystemAttribute":
                    return SystemAttributes.GetSystemAttribute(primaryKey);

                case "TabularDataImport":
                    return TabularDataImports.GetTabularDataImport(primaryKey);

                case "TabularDataImportTableType":
                    var tabularDataImportTableType = TabularDataImportTableType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(tabularDataImportTableType, "TabularDataImportTableType", primaryKey);
                    return tabularDataImportTableType;

                case "Tag":
                    return Tags.GetTag(primaryKey);

                case "TaxonomyBranch":
                    return TaxonomyBranches.GetTaxonomyBranch(primaryKey);

                case "TaxonomyLevel":
                    var taxonomyLevel = TaxonomyLevel.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(taxonomyLevel, "TaxonomyLevel", primaryKey);
                    return taxonomyLevel;

                case "TaxonomyTrunk":
                    return TaxonomyTrunks.GetTaxonomyTrunk(primaryKey);

                case "tmpAgreementContact":
                    return tmpAgreementContacts.GettmpAgreementContact(primaryKey);

                case "tmpAgreementContactsImportTemplate":
                    return tmpAgreementContactsImportTemplates.GettmpAgreementContactsImportTemplate(primaryKey);

                case "TrainingVideo":
                    return TrainingVideos.GetTrainingVideo(primaryKey);

                case "TreatmentArea":
                    return TreatmentAreas.GetTreatmentArea(primaryKey);

                case "TreatmentCode":
                    return TreatmentCodes.GetTreatmentCode(primaryKey);

                case "TreatmentDetailedActivityType":
                    var treatmentDetailedActivityType = TreatmentDetailedActivityType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(treatmentDetailedActivityType, "TreatmentDetailedActivityType", primaryKey);
                    return treatmentDetailedActivityType;

                case "Treatment":
                    return Treatments.GetTreatment(primaryKey);

                case "TreatmentType":
                    var treatmentType = TreatmentType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(treatmentType, "TreatmentType", primaryKey);
                    return treatmentType;

                case "TreatmentUpdate":
                    return TreatmentUpdates.GetTreatmentUpdate(primaryKey);

                case "Vendor":
                    return Vendors.GetVendor(primaryKey);

                case "WashingtonLegislativeDistrict":
                    return WashingtonLegislativeDistricts.GetWashingtonLegislativeDistrict(primaryKey);
                default:
                    throw new NotImplementedException(string.Format("No loader for type \"{0}\"", type.FullName));
            }
        }
    }
}