@*-----------------------------------------------------------------------
    <copyright file="ProjectLocationDetail.cshtml" company="Tahoe Regional Planning Agency and Sitka Technology Group">
    Copyright (c) Tahoe Regional Planning Agency and Sitka Technology Group. All rights reserved.
    <author>Sitka Technology Group</author>
    </copyright>

    <license>
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

    Source code is available upon request via <support@sitkatech.com>.
    </license>
    -----------------------------------------------------------------------*@
@using LtInfo.Common
@using LtInfo.Common.ModalDialog
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using ProjectFirma.Web.Models
@inherits ProjectFirma.Web.Views.Shared.ProjectLocationControls.ProjectLocationDetail

<style>
    .mapEditor textarea {
        resize: none;
        height: 60px;
    }
    .selectedRow {
        background-color: #FFF67F;
    }
</style>
<div ng-controller="ProjectLocationDetailController">
    <p>
    Create a drawing of your @FieldDefinition.Project.GetFieldDefinitionLabel()’s implementation (but not the full area affected by your @FieldDefinition.Project.GetFieldDefinitionLabel()).
    The detailed @FieldDefinition.ProjectLocation.GetFieldDefinitionLabel() information will appear on the @FieldDefinition.Project.GetFieldDefinitionLabel() Fact Sheet and @FieldDefinition.Project.GetFieldDefinitionLabel() summary page.
    <ul>
        <li>To zoom to your @FieldDefinition.Project.GetFieldDefinitionLabel() area hold down the Shift key and drag a rectangle.</li>
        <li>Use the edit tools on the left of the map to add point, line, and polygon features representing details of your @FieldDefinition.Project.GetFieldDefinitionLabel(), such as the @FieldDefinition.Project.GetFieldDefinitionLabel() boundary, a specific stream segment, or an area of interest.</li>
        <li>After adding a feature, click it to provide a brief description of the feature.</li>
    </ul>
</p>
<hr />
<p>
    <span style="margin-right:10px">Instead of drawing your @FieldDefinition.Project.GetFieldDefinitionLabel() details by hand, you may alternately upload a GIS file.</span>
    @ModalDialogFormHelper.ModalDialogFormLink(null,
        "Upload a GIS File",
        ViewDataTyped.UploadGisFileUrl,
        "Upload ArcGIS File Geodatabase",
        1000,
        ModalDialogFormHelper.SaveButtonID,
        "Approve Upload",
        "Cancel",
        new List<string>(){"btn", "btn-sm", "btn-firma"},
        null,
        null,
        ViewDataTyped.MapFormId,
        null)
</p>


<div id="@ViewDataTyped.InitJson.MapDivID" style="height: 500px">
</div>
@if (ViewDataTyped.HasProjectLocationPoint)
{
    <div>
        <img style="margin-top: 10px; margin-right: 5px;" src="@ViewDataTyped.SimplePointMarkerImg"> Simple @FieldDefinition.Project.GetFieldDefinitionLabel() location (for reference)
    </div>
}


    <form method="POST" id="@ViewDataTyped.MapFormId" action="@ViewDataTyped.SaveFeatureCollectionUrl">
        <div>
            @Html.ValidationSummary()
            <table class="table table-bordered table-projectLocations">
                <thead>
                    <tr>
                        <th @*data-ng-if="!AngularViewData.IsInCompletedReview"*@></th>
                        <th style="width: 150px">Feature Name</th>
                        <th>Feature</th>
                        <th>Location Type</th>

                        <th style="width: 250px">Notes</th>
                    </tr>
                </thead>
                <tr data-ng-repeat="projectLocation in AngularModel.ProjectLocationJsons" class="clickable-row"
                    data-ng-class="{'selectedRow': isSelectedProjectLocation(projectLocation)}"
                    data-ng-click="toggleProjectLocationDetails(projectLocation.ProjectLocationLeafletID)">
                    @* trash icon for deleting *@
                    <td @*data-ng-if="!AngularViewData.isInCompletedReview"*@>
                        <a href="javascript:void(0)" data-ng-click="deleteProjectLocationRowAndRefreshMap(projectLocation.ProjectLocationLeafletID)">
                            <span class="glyphicon glyphicon-trash"></span>
                        </a>
                    </td>
                    @* feature name *@
                    <td style="width: 200px">
                        <input type="text" name="ProjectLocationJsons[{{$index}}].ProjectLocationName"
                               data-ng-model="projectLocation.ProjectLocationName" value="{{projectLocation.ProjectLocationName}}" style="width: 100%" required maxlength="200" />
                        @*<div class="alert alert-danger field-validation-error" role="alert" data-ng-if="hasProjectLocationError($index, 'projectLocationName')">
                            <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                            <span data-ng-bind="getProjectLocationErrorMessage($index, 'projectLocationName')"></span>
                        </div>*@
                        <span ng-if="projectLocation.projectLocationID != null">
                            <input type="hidden" name="ProjectLocationJsons[{{$index}}].projectLocationID" value="{{projectLocation.projectLocationID}}" />
                        </span>
                    </td>
                    @* feature (line, point, poly) *@
                    <td>
                        <span data-ng-bind="projectLocation.ProjectLocationFeatureType"></span>
                        <input type="hidden" name="ProjectLocationJsons[{{$index}}].ProjectLocationGeometryWellKnownText"
                               value="{{projectLocation.ProjectLocationGeometryWellKnownText}}" />
                    </td>
                    @* location type (ProjectLocationType table) *@
                    <td>
                        <select name="ProjectLocationJsons[{{$index}}].ProjectLocationTypeID"
                                ng-model="projectLocation.ProjectLocationTypeID" required >
                            <option value="">-- Select type --</option>
                            <option ng-repeat="projectLocationType in AngularViewData.ProjectLocationTypeJsons"
                                    value="{{projectLocationType.ProjectLocationTypeID}}" ng-selected="projectLocationType.ProjectLocationTypeID === projectLocation.ProjectLocationTypeID">
                                {{projectLocationType.ProjectLocationTypeDisplayName}}
                            </option>
                        </select>
                        

                        @*<div class="alert alert-danger field-validation-error" role="alert" data-ng-if="hasProjectLocationError($index, 'projectLocationTypeID')">
                            <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                            <span data-ng-bind="getProjectLocationErrorMessage($index, 'projectLocationTypeID')"></span>
                        </div>*@
                    </td>
                    @* notes/annotation *@
                    <td style="width: 250px">
                        <input type="text" name="ProjectLocationJsons[{{$index}}].ProjectLocationNotes" data-ng-model="projectLocation.ProjectLocationNotes" style="width: 100%" maxlength="500" />
                        @*<div class="alert alert-danger field-validation-error" role="alert" data-ng-if="hasProjectLocationError($index, 'notes')">
                            <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                            <span data-ng-bind="getProjectLocationErrorMessage($index, 'notes')"></span>
                        </div>*@
                    </td>
                </tr>
            </table>
            <p class="systemText">

            </p>
        </div>
    </form>

@*<div class="alert alert-danger" role="alert" data-ng-repeat="projectLocationJson in getProjectLocationsWithProjectLocationTypesNotAlignedWithGeometryType()">
        For ProjectLocation "{{projectLocationJson.projectLocationName}}", you indicated you have a "{{getProjectLocationTypeName(projectLocationJson.projectLocationTypeID)}}" ProjectLocation Type, yet represented it using a {{projectLocationJson.projectLocationGeometryType}}. While this is allowed, please make sure this is what you want to do.
    </div>*@

@*<div th:if="@ViewDataTyped.inDueDiligence()" class="projectComment">
        <hr>
        <h4>Review Comments</h4>
        <textarea class="form-control" th:field="*{comments}" maxlength="1000"></textarea>
        <div class="alert alert-danger field-validation-error" role="alert"
             th:if="${#fields.hasErrors('comments')}">
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
            <span th:errors="*{comments}"></span>
        </div>
    </div>*@



</div>



<script type="text/javascript">
    getDrawOptions = function(editableFeatureGroup)
    {
        var myIcon = L.MakiMarkers.icon({
            icon: "marker",
            color: "#f357a1",
            size: "m"
        });

        var options = {
            position: 'topleft',
            draw: {
                polyline: {
                    shapeOptions: {
                        color: '#f357a1',
                        weight: 10
                    }
                },
                polygon: {
                    allowIntersection: false, // Restricts shapes to simple polygons
                    drawError: {
                        color: '#e1e100', // Color the shape will turn when intersects
                        message: 'Self-intersecting polygons are not allowed.' // Message that will show when intersect
                    },
                    shapeOptions: {
                        color: '#f357a1'
                    }
                },
                circle: false, // Turns off this drawing tool
                rectangle: {
                    shapeOptions: {
                        color: "#f357a1"
                    }
                },
                marker: {
                    icon: myIcon
                }
            },
            edit: {
                featureGroup: editableFeatureGroup, //REQUIRED!!
                edit: {
                    maintainColor: true,
                    opacity: 0.3
                },
                remove: true
            }
        };
        return options;
    };

    var projectFirmaMap;
    jQuery(document).ready(function()
    {
        var saveButton = jQuery("#" + "@ModalDialogFormHelper.SaveButtonID");
        if(!Sitka.Methods.isUndefinedNullOrEmpty(saveButton))
        {
            saveButton.text("Save");
        }

        var modalTitle = jQuery(".modal-title");
        if(!Sitka.Methods.isUndefinedNullOrEmpty(modalTitle))
        {
            modalTitle.html("@(string.Format("Edit {0} - Detail", FieldDefinition.ProjectLocation.GetFieldDefinitionLabel()))");
        }

    });

    ProjectFirmaMaps.Map.prototype.getTextAreaId = function(featureId) { return "textareaFor" + featureId; };


</script>

<script type="text/javascript" src="@Url.Content("~/Views/Shared/ProjectLocationControls/ProjectLocationDetailController.js")"></script>
<script type="text/javascript">
    // <![CDATA[
    angular.module("ProjectFirmaApp").factory("angularModelAndViewData",
        function() {
            return {
                "AngularModel": @Html.Raw(JObject.FromObject(Model).ToString(Formatting.None)),
                "AngularViewData":
                    @Html.Raw(JObject.FromObject(ViewDataTyped.ViewDataForAngular).ToString(Formatting.None)),
            };
        });
    angular.bootstrap(jQuery("[ng-controller=\"ProjectLocationDetailController\"]"), ["ProjectFirmaApp"]);
    // ]]>
</script>
