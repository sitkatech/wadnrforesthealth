@using LtInfo.Common.BootstrapWrappers
@using LtInfo.Common.HtmlHelperExtensions
@using LtInfo.Common.Mvc
@using Newtonsoft.Json.Linq

@inherits ProjectFirma.Web.Views.Shared.ProjectDocument.NewProjectDocument

<script type="text/javascript" src="@Url.Content("~/Views/Shared/ProjectDocument/ProjectDocumentsController.js")"></script>
<script type="text/javascript">
        // <![CDATA[
        angular.module("ProjectFirmaApp").factory("angularModelAndViewData", function ()
        {
            return {
                AngularModel: @Html.Raw(JObject.FromObject(Model)),
                AngularViewData: @Html.Raw(JObject.FromObject(ViewDataTyped))
            };
        });
        jQuery(function ()
        {
            angular.bootstrap(jQuery("#AddDocumentsAngularApp"), ["ProjectFirmaApp"]);
            jQuery(".modal").on("hidden.bs.modal",
                function() {
                    jQuery(".bootstrap-select.open").removeClass("open");
                });
        });
        // ]]>
</script>

<div id="AddDocumentsAngularApp" class="multiple-file-upload-wrapper" ng-controller="ProjectDocumentsController">
    @using (Html.BeginForm())
    {
        <div class="form-horizontal">
            <div class="form-group">
                <div class="col-sm-12">
                    @Html.ValidationSummary()
                    @Html.LabelWithRequiredTagFor("File(s)")
                    <input type="file" ng-file-model="files" multiple name="@Html.NameFor(x => x.Files)" class="multiple-file-upload" id="@Html.IdFor(x => x.Files)" />
                    <p class="help-block">Drag and drop or click on the box above to upload files. Allowed Extensions: @Model.GetFileExtensions(x => x.Files)</p>
                </div>
            </div>
        </div>
        <div class="form-horizontal file-inputs" ng-repeat="(key, file) in files">
            <div class="form-group">
                <div class="col-sm-12">
                    <p class="help-block" style="margin-bottom: 0;"> @BootstrapHtmlHelpers.MakeGlyphIcon("glyphicon-file") {{file.name}}</p>
                </div>
            </div>
            <div class="form-group">
                <div class="col-xs-12 col-sm-3 control-label">
                    @Html.LabelWithRequiredTagFor("Display Name")
                </div>
                <div class="col-xs-12 col-sm-9">
                    <input type="text" class="form-control" name="@Html.NameFor(x => x.DisplayNames[0]).ToString().Replace("0", "{{$index}}")" id="@((Html.IdFor(m => m.DisplayNames) + "[0]").ToString().Replace("0", "{{$index}}"))" />
                </div>
            </div>
            <div class="form-group">
                <div class="col-xs-12 col-sm-3 control-label">
                    @Html.LabelWithSugarFor(x => x.Descriptions)
                </div>
                <div class="col-xs-12 col-sm-9">
                    <input type="textarea" class="form-control" name="@Html.NameFor(x => x.Descriptions[0]).ToString().Replace("0", "{{$index}}")" id="@((Html.IdFor(m => m.Descriptions) + "[0]").ToString().Replace("0", "{{$index}}"))" />
                </div>
            </div>
            <div class="form-group">
                <div class="col-xs-12 col-sm-3 control-label">
                    @Html.LabelWithSugarFor(m => m.ProjectDocumentTypeID)
                </div>
                <div class="col-xs-12 col-sm-9">
                    @Html.DropDownListFor(m => m.ProjectDocumentTypeID, ViewDataTyped.ProjectDocumentTypesList, new { style = "width: 100%;", @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.ProjectDocumentTypeID)
                </div>
            </div>
        </div>
        @Html.HiddenFor(m => m.ParentID)
    }
</div>
