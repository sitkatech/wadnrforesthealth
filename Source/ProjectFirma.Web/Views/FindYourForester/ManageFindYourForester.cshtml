@*-----------------------------------------------------------------------
    <copyright file="ManageFindYourForester.cshtml" company="Tahoe Regional Planning Agency and Environmental Science Associates">
    Copyright (c) Tahoe Regional Planning Agency and Environmental Science Associates. All rights reserved.
    <author>Environmental Science Associates</author>
    </copyright>

    <license>
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

    Source code is available upon request via <support@sitkatech.com>.
    </license>
    -----------------------------------------------------------------------*@
@using LtInfo.Common
@using ProjectFirma.Web.Views
@using ProjectFirma.Web.Views.Shared
@using LtInfo.Common.AgGridWrappers
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using ProjectFirma.Web.Common
@using ProjectFirma.Web.Views.FindYourForester
@inherits ProjectFirma.Web.Views.FindYourForester.ManageFindYourForester
@section JavascriptAndStylesContent
{
    @{ AgGridIncludes.RenderPartialView(Html); }
    @{ MapJavascriptIncludes.RenderPartialView(Html); }
}

<div>
    @{ ViewPageContent.RenderPartialView(Html, ViewDataTyped.ViewPageContentViewData); }
</div>

<div class="container-fluid">
    <div class="row">
        <div class="col-md-12">

            <div id="@ViewDataTyped.MapInitJson.MapDivID" style="height: 500px; margin: 5px 0 5px 0">
            </div>
            <p style="font-size: 10px">To zoom, hold down Shift and drag a rectangle.</p>

        </div>
        
    </div>
    <div class="row">
        <div class="col-md-12">
            <div class="panel panelFirma">
                <div class="panel-heading panelTitle">
                    <h2>Forester Work Units</h2>
                </div>
                <div class="panel-body">
                    @Html.AgGrid(ViewDataTyped.GridSpec, ViewDataTyped.GridName, ViewDataTyped.GridDataUrl, "height:500px", AgGridResizeType.VerticalResizableHorizontalAutoFit)
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    jQuery(function()
    {
        var mapInitJson = @Html.Raw(JObject.FromObject(ViewDataTyped.MapInitJson).ToString(Formatting.None));
        var sitkaMap = new ProjectFirmaMaps.Map(mapInitJson, null, true);

        var dataUrlTemplate = new Sitka.UrlTemplate(@Html.Raw(ViewDataTyped.GridDataUrlTemplate.ToJS()));
        var pageUrlTemplate = new Sitka.UrlTemplate(@Html.Raw(ViewDataTyped.PageUrlTemplate.ToJS()));
        var rootUrl = "@FirmaWebConfiguration.WebMapServiceUrl";

        var findYourForesterRoleID = @ViewDataTyped.DefaultForesterRoleID;
        var selectedPolygon = [];

        sitkaMap.map.on("overlayadd", function (e) {
            checkAndRemoveSelectedPolygon();

            var layer = Object.values(e.layer._layers)[0];
            findYourForesterRoleID = layer.ContextObjectId;

            window.history.pushState({}, '', pageUrlTemplate.ParameterReplace(findYourForesterRoleID));

            var dataUrl = dataUrlTemplate.ParameterReplace(findYourForesterRoleID);
            @(ViewDataTyped.GridName)LoadGridData(dataUrl);

        });


        sitkaMap.map.on("click", function (e) {
            highlightForester(e);
        });

        function getForesterWorkUnitIDFromRowNode(rowNode) {

            var foresterWorkUnitId = rowNode.data.@ManageFindYourForesterGridSpec.ForesterWorkUnitIDColumnName;
            return foresterWorkUnitId;

        }

        var defaultWfsParameters = {
            service: 'WFS',
            version: '1.1.1',
            request: 'GetFeature',
            maxFeatures: 100,
            outputFormat: 'application/json',
            typeNames: '@FirmaWebConfiguration.GetFindYourForesterWmsLayerName()',
        };

        function checkAndRemoveSelectedPolygon()
        {
            if (selectedPolygon) {
                selectedPolygon.forEach((element) => sitkaMap.map.removeLayer(element));
                selectedPolygon = [];
                sitkaMap.map.closePopup();
            }
        }

        function highlightMapFromGridClick(event) {

            if (event.node.isSelected() && event.source !== 'api') {
                var foresterWorkUnitId = getForesterWorkUnitIDFromRowNode(event.node);
                // Check for previous selected polygon layer and possibly remove it
                if (event.source !== 'checkboxSelected'){
                    checkAndRemoveSelectedPolygon();
                }

                var customWfsParams = {
                    cql_filter: 'PrimaryKey=' + foresterWorkUnitId
                };

                var parametersWfs = L.Util.extend(defaultWfsParameters, customWfsParams);
                jQuery.ajax({
                    url : rootUrl + L.Util.getParamString(parametersWfs),
                    dataType : 'json'
                }).done(function(data) {
                    // Create the newly selected polygon layer using WFS
                    if (data.features.length > 0) {
                        var shapeSelected = L.geoJSON(data);
                        selectedPolygon.push(shapeSelected);
                        shapeSelected.addTo(sitkaMap.map);


                    }

                }).fail(function (data) {
                    console.log(data);
                });
            }


        };

        @(ViewDataTyped.GridName)GridOptionsApi.addEventListener('rowSelected', highlightMapFromGridClick);



        var defaultWmsParameters = {
            service: 'WMS',
            version: '1.1.1',
            request: 'GetFeatureInfo',
            maxFeatures: 100,
            info_format: 'application/json',
            format_options: 'callback:getJson',
            LAYERS: '@FirmaWebConfiguration.GetFindYourForesterWmsLayerName()',
            QUERY_LAYERS: '@FirmaWebConfiguration.GetFindYourForesterWmsLayerName()'

        };

        function highlightForester(e) {

            // Check for previous selected polygon layer and possibly remove it
            checkAndRemoveSelectedPolygon();


            var ajaxCalls = sitkaMap.popupForWMSAndVectorLayers(sitkaMap.getWmsLayers(true), sitkaMap.getVectorLayers(true), e.latlng);
            sitkaMap.carryOutPromises(ajaxCalls).then(results => {
                results.forEach(result => {
                    
                    if (!result || !result.properties) return;

                    var foresterWorkUnitID = result.properties.PrimaryKey;
                    
                    @(ViewDataTyped.GridName)GridOptionsApi.forEachNode((rowNode, index) => {
                        var cellValue = getForesterWorkUnitIDFromRowNode(rowNode);
                        rowNode.setSelected(false);
                        if (foresterWorkUnitID == cellValue) {
                            rowNode.setSelected(true, true, 'api');
                        }

                    });

                });

            });


            var customWmsParams = {
                bbox: sitkaMap.map.getBounds().toBBoxString(),
                cql_filter: 'ForesterRoleID=' + findYourForesterRoleID,
                width: e.target._size.x,
                height: e.target._size.y,
                x: Math.trunc(e.containerPoint.x),
                y: Math.trunc(e.containerPoint.y)
            };

            var parametersWms = L.Util.extend(defaultWmsParameters, customWmsParams);

            jQuery.ajax({
                url : rootUrl + L.Util.getParamString(parametersWms),
                dataType : 'json'
            }).done(function(data) {
                // Create the newly selected polygon layer using WFS
                if (data.features.length > 0) {

                    var shapeSelected = L.geoJSON(data);
                    selectedPolygon.push(shapeSelected);
                    shapeSelected.addTo(sitkaMap.map);

                }

            }).fail(function (data) {
                console.log("Ajax call to highlight Forester failed");
                console.log(data);
            });

        }

    });
</script>
