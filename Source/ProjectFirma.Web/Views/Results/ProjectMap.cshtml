@*-----------------------------------------------------------------------
    <copyright file="ProjectMap.cshtml" company="Tahoe Regional Planning Agency and Environmental Science Associates">
    Copyright (c) Tahoe Regional Planning Agency and Environmental Science Associates. All rights reserved.
    <author>Environmental Science Associates</author>
    </copyright>

    <license>
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

    Source code is available upon request via <support@sitkatech.com>.
    </license>
    -----------------------------------------------------------------------*@
@using LtInfo.Common
@using ProjectFirma.Web.Models
@using ProjectFirma.Web.Views.Shared.ProjectLocationControls
@using ProjectFirma.Web.Views.Shared
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using ProjectFirma.Web.Common
@inherits ProjectFirma.Web.Views.Results.ProjectMap
@section JavascriptAndStylesContent
{
    @{ MapJavascriptIncludes.RenderPartialView(Html); }
    <script type="text/javascript" src="/Content/Bootstrap-select/bootstrap-select.min.js"></script>
    <script type="text/javascript" src="/Content/fancytree/jquery.fancytree-all.min.js"></script>
    <link rel="stylesheet" href="/Content/Bootstrap-select/bootstrap-select.min.css" type="text/css"/>
    <link rel="stylesheet" href="/Content/fancytree/skin-bootstrap/ui.fancytree.min.css" type="text/css"/>

    <style>
        .selectedRow {
            background-color: #FFF67F;
        }
        ul.projectList
        {
            margin-bottom: 15px;
            overflow-y: auto;
        }

        /* customizing the look of the clusters*/

        .marker-cluster-small
        {
            background-color: #9e9e9e;
            opacity: 0.7;
        }

        .marker-cluster-small div
        {
            background-color: #9e9e9e;
            opacity: 0.7;
        }

        .marker-cluster-medium
        {
            background-color: #6e6e6e;
            opacity: 0.7;
        }

        .marker-cluster-medium div
        {
            background-color: #6e6e6e;
            opacity: 0.7;
        }

        .marker-cluster-large
        {
            background-color: #3e3e3e;
            opacity: 0.7;
        }

        .marker-cluster-large div
        {
            background-color: #3e3e3e;
            opacity: 0.7;
        }

        .marker-cluster div
        {
            color: #e0ffff;
            font-weight: 900;
        }

        #@ViewDataTyped.ProjectLocationsMapInitJson.MapDivID
        {
            height: 700px;
        }

        .popover
        {
            max-width: 100%;
        }

        .mapCustomizations .dropdown-menu
        {
            font-size: 13px;
            background-color: white;
        }

        .mapCustomizationSingleSelect button
        {
            font-size: 13px;
            padding: 3px 18px 3px 5px !important;
        }

        .mapCustomizationMultiSelect button
        {
            font-size: 13px;
            padding: 3px 25px 3px 5px !important;
        }

        .bootstrap-select
        {
            padding: 0;
        }

        #projectLocationGroupTypeTree > tbody > tr.fancytree-active > td
        {
            background-color: transparent !important;
            color: initial !important;
        }

        table.fancytree-ext-table.fancytree-container > tbody > tr.fancytree-active > td span.fancytree-title
        {
            color: black;
        }

        span.fancytree-icon
        {
            visibility: hidden;
            max-width: 0;
            margin: 0;
        }

        span.fancytree-title
        {
            margin-left: 0;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        span.fancytree-node
        {
            display: inline-block;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .mapGridContainer
        {
            margin-top: 15px;
        }
    </style>
}

<div>
    @{ ViewPageContent.RenderPartialView(Html, ViewDataTyped.ViewPageContentViewData); }
</div>

<div class="mapCustomizations" style="display: inline-block; vertical-align: middle; margin-top: 10px">
    <span style="font-weight: bold">Color @FieldDefinition.Project.GetFieldDefinitionLabelPluralized() by:</span>
    <select id="ColorPropertyName" class="btn btn-sm mapCustomizationSingleSelect" data-width="auto" style="display:none">
        @foreach (var colorByType in ProjectColorByType.All.Where(x => x.IsRelevantToTenant))
        {
            <option value="@colorByType.ProjectColorByTypeNameWithIdentifier" data-colorby="@colorByType.ProjectColorByTypeName" data-displayname="@colorByType.DisplayName">@colorByType.DisplayName</option>
        }
    </select>

    <span style="font-weight: bold">Filter @FieldDefinition.Project.GetFieldDefinitionLabelPluralized() by:</span>
    <select id="FilterPropertyName" name="FilterPropertyName" class="btn btn-sm mapCustomizationSingleSelect" data-width="auto" style="display:none">
        @{
            var displayGroup = -1;
            foreach (var plft in ViewDataTyped.ProjectLocationFilterTypesAndValues.Keys.OrderBy(p => p.DisplayGroup * p.SortOrder))
            {
                if (displayGroup != -1 && displayGroup != plft.DisplayGroup)
                {
                    <option data-divider="true"></option>
                }
                <option value="@plft.ProjectLocationFilterTypeNameWithIdentifier" data-filter="@plft.ProjectLocationFilterTypeName">
                    @plft.DisplayName
                </option>
                displayGroup = plft.DisplayGroup;
            }
        }
    </select>

    @foreach (var keyValuePair in ViewDataTyped.ProjectLocationFilterTypesAndValues)
    {
        @Html.DropDownList(keyValuePair.Key.ProjectLocationFilterTypeNameWithIdentifier, keyValuePair.Value,
        new { multiple = "", style = "display:none", @class = "btn-sm" })
    }

    <a id="customUrlPopover" data-container="body" data-toggle="popover" data-trigger="click" data-placement="top" data-html="true" href="javascript:void(0)">
        Link to this map
    </a>
</div>

<div class="clusterLocationsContainer" style="font-weight: bold;">
    <label><span class="glyphicon glyphicon-map-marker"></span> Cluster @FieldDefinition.ProjectLocation.GetFieldDefinitionLabelPluralized():</label><input style="margin-left: 5px" type="checkbox" id="ClusterLocations" />
</div>




<div ng-controller="ProjectMapController">
    <div class="row">
        <div class="col-md-12">
            <fieldset style="border-bottom: 1px solid #e5e5e5; padding-bottom: 5px;">
                <legend style="font-size: 14px; font-weight: bold; margin-bottom: 5px;">Zoom Project Map to Zip Code or Mailing Address with Zip Code</legend>
                <label for="txtZoomAddress">Street address, City, and State</label> 
                <input id="txtZoomAddress" type="text" style="width: 320px; margin-right: 10px;" placeholder="123 Main St. SE, Olympia, WA" />
                <label for="txtZoomZip">Zip Code</label>
                <input id="txtZoomZip" type="text" style="width: 80px;" placeholder="12345" />
                <button id="btnZoomToAddress">
                    Zoom to Address
                </button>
                <span style="display:none; color: red;" id="errZoomNoZipCode">Please provide a zip code for zooming the Project Map.</span>
            </fieldset>
        </div>
    </div>
    <div class="row" style="vertical-align: top;">
        <div class="col-md-12" id="mapPanel">
            @{ ProjectLocationsMap.RenderPartialView(Html, ViewDataTyped.ProjectLocationsMapViewData); }

            <div id="showBasinwideProjectsToast">
                <a class="btn pull-right" style="clear: left;" title="@String.Format("{0} that are not represented by a point on the map are listed here.", FieldDefinition.Project.GetFieldDefinitionLabelPluralized())">
                    <span class="glyphicon glyphicon-chevron-left"></span>Show @FieldDefinition.Project.GetFieldDefinitionLabelPluralized() with no Simple Location
                </a>
            </div>
            <div id="hideBasinwideProjectsToast" style="display: none">
                <a class="btn pull-right">
                    Hide @FieldDefinition.Project.GetFieldDefinitionLabelPluralized() with no Simple Location<span class="glyphicon glyphicon-chevron-right"></span>
                </a>
            </div>
            <div>To zoom, hold down Shift and drag a rectangle.</div>

        </div>
        <div id="projectsWithLocationAreaToast" style="display: none; padding: 0 8px 8px 8px">
            <p>
                Some @FieldDefinition.Project.GetFieldDefinitionLabelPluralized() do not have a simple location and are not represented by a point on the map, but are listed here.
            </p>
            <div style="clear: both; white-space: nowrap; overflow-x: hidden; overflow-y: auto; max-height: 750px">
                <table id="projectLocationGroupTypeTree" class="table table-hover table-condensed" style="margin-bottom: 10px">
                    <colgroup>
                        <col style="width: auto; text-overflow: ellipsis"/>
                        <col style="width: 150px; text-align: right"/>
                    </colgroup>
                    <thead>
                    <tr>
                        <th></th>
                        <th></th>
                    </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
        </div>
    </div>
</div>



<script type="text/javascript">
    var projectFirmaMap = null;
    function displayProjectsWithLocationArea(projectMapCustomization)
    {
        function renderFancyTreeColumns(event, data)
        {
            var node = data.node;
            var tr = jQuery(node.tr);
            var $tdList = tr.find(">td");

            var numberOfProjectsColumn = $tdList.eq(1);
            if (node.data.NumberOfProjects != null)
            {
                numberOfProjectsColumn.text(node.data.NumberOfProjects);
            }
        }

        var glyph_opts = {
            map: {
                expanderClosed: "glyphicon glyphicon-plus",
                expanderOpen: "glyphicon glyphicon-minus" // glyphicon-collapse-down
            }
        };

        var treeDiv = jQuery("#projectLocationGroupTypeTree");
        treeDiv.fancytree({
                extensions: ["glyph", "table"],
                quicksearch: true,
                glyph: glyph_opts,
                table: {
                    nodeColumnIdx: 0,
                    indentation: 10
                },
                renderColumns: function(event, data)
                {
                    renderFancyTreeColumns(event, data);
                }
            }
        );
        var tree = treeDiv.fancytree("getTree");
        tree.reload(
            {
                type: "POST",
                url: @Html.Raw(ViewDataTyped.FilteredProjectsWithLocationAreasUrl.ToJS()),
                data: { projectMapCustomization: projectMapCustomization },
                dataType: "json"
            });
    };

    function updateCustomUrlPopover()
    {
        var filterPropertyNameDropdown = jQuery("#FilterPropertyName");
        var filterPropertyValueDropdown = jQuery("#" + filterPropertyNameDropdown.val());
        var colorPropertyNameDropdown = jQuery("#ColorPropertyName");

        var filteredUrl = "@ViewDataTyped.ProjectLocationsUrl" + "?@ProjectMapCustomization.FilterByQueryStringParameter=" + filterPropertyNameDropdown.find("option:selected").data("filter");

        var selectedValuesFromDropdown = filterPropertyValueDropdown.val();
        if (!Sitka.Methods.isUndefinedNullOrEmpty(selectedValuesFromDropdown))
        {
            if (selectedValuesFromDropdown.length != filterPropertyValueDropdown.find("option").length)
            {
                var filterValues = selectedValuesFromDropdown.join(",");
                filteredUrl += "&@ProjectMapCustomization.FilterValuesQueryStringParameter=" + filterValues;
            }
        }

        filteredUrl += "&@ProjectMapCustomization.ColorByQueryStringParameter=" +
            colorPropertyNameDropdown.find("option:selected").data("colorby");

        var width = filteredUrl.length * 6;
        var filterHtml = "<input id='filterHtmlInput' readonly='true' style='background-color: white; width:" +
            width +
            "px' type='url' value='" +
            filteredUrl +
            "' onclick='this.select()' />";

        var filteredUrlPopover = jQuery("#customUrlPopover");
        filteredUrlPopover.attr("data-content", filterHtml);
        jQuery(".popover-content").html(filterHtml);
    }

    function buildAndInitializeDropdowns(map, initialCustomization) {
        var colorPropertyNameDropdown = jQuery("#ColorPropertyName");
        colorPropertyNameDropdown.selectpicker();
        colorPropertyNameDropdown.selectpicker('val', initialCustomization.ColorByPropertyName);

        colorPropertyNameDropdown.on("change", function() {
            map.changePropertyToColorProjectLocationsBy(this.value);
            jQuery("#mapLegendTitle").html(colorPropertyNameDropdown.find("option:selected").data("displayname") + ":");
            updateCustomUrlPopover();
        });

        var filterPropertyNameDropdown = jQuery("#FilterPropertyName");
        filterPropertyNameDropdown.selectpicker();
        filterPropertyNameDropdown.selectpicker('val', initialCustomization.FilterPropertyName);

        var filterPropertyNameOptions = jQuery("option", filterPropertyNameDropdown);

        filterPropertyNameDropdown.on("click", function() {
            filterPropertyNameOptions.each(function(index, option) {
                jQuery("#" + option.value).selectpicker('hide');
            });
            var filterPropertyValueDropdown = jQuery("#" + this.value);
            filterPropertyValueDropdown.selectpicker('show');
            filterPropertyValueDropdown.trigger("change");
        });

        filterPropertyNameOptions.each(function(index, option) {
            var filterPropertyNameSelected = option.value;
            var filterPropertyValueDropdown = jQuery("#" + filterPropertyNameSelected);

            filterPropertyValueDropdown.attr("data-selected-text-format", "count>1");
            filterPropertyValueDropdown.attr("data-count-selected-text", "{0} of {1} selected");
            filterPropertyValueDropdown.attr("data-actions-box", "true");
            filterPropertyValueDropdown.addClass("mapCustomizationMultiSelect");

            filterPropertyValueDropdown.selectpicker('hide');
            filterPropertyValueDropdown.selectpicker('selectAll');

            filterPropertyValueDropdown.on("change", function() {
                var filterPropertyValueSelected = filterPropertyValueDropdown.val();

                var actualFilter = [];
                if (!Sitka.Methods.isUndefinedNullOrEmpty(filterPropertyValueSelected)) {
                    actualFilter = filterPropertyValueSelected;
                }
                map.changeFilter(filterPropertyNameSelected, actualFilter);
                var filterObject = {
                    FilterPropertyName: filterPropertyNameSelected,
                    FilterPropertyValues: actualFilter
                };

                displayProjectsWithLocationArea(filterObject);
                updateCustomUrlPopover();
            });
        });

        var filterPropertyValueDropdown = jQuery("#" + initialCustomization.FilterPropertyName);
        filterPropertyValueDropdown.selectpicker('val', initialCustomization.FilterPropertyValues);
        filterPropertyValueDropdown.selectpicker('show');
        displayProjectsWithLocationArea(initialCustomization);
    }

    jQuery(function() {
        //debugger;
        var projectLocationsMapInitJson = @Html.Raw(JObject.FromObject(ViewDataTyped.ProjectLocationsMapInitJson).ToString(Formatting.None));
        if (!projectFirmaMap) {
            projectFirmaMap = new ProjectFirmaMaps.Map(projectLocationsMapInitJson, null, null, "@FirmaWebConfiguration.WebMapServiceUrl");
        }
        projectFirmaMap.initializeProjectLocations(projectLocationsMapInitJson);

        projectFirmaMap.map.scrollWheelZoom.enable();

        buildAndInitializeDropdowns(projectFirmaMap, projectLocationsMapInitJson.ProjectMapCustomization);

        var clusterLocationsCheckbox = jQuery("#ClusterLocations");
        clusterLocationsCheckbox.on("change", function() {
            projectFirmaMap.changeClustering(clusterLocationsCheckbox.is(":checked"));
        });

        jQuery('#customUrlPopover').popover({ container: "body" });
        jQuery('#customUrlPopover').on('shown.bs.popover', function() { jQuery("#filterHtmlInput").select(); });

        updateCustomUrlPopover();

        var geocodeMarker = L.marker();

        //zoom to address
        jQuery('#btnZoomToAddress').on("click", function() {


            var dataAddress = jQuery('#txtZoomAddress').val();
            var dataZip = jQuery('#txtZoomZip').val();

            if (jQuery.trim(dataZip).length === 0) {
                jQuery('#errZoomNoZipCode').show();
            } else {

                jQuery('#errZoomNoZipCode').hide();
                $.ajax({
                        method: "POST",
                        url: "@ViewDataTyped.GeocodeAddressUrl",
                    data: { address: dataAddress, zip: dataZip }
                })
                .done(function (msg) {
                    if (!msg.ErrorStatus) {

                        if (geocodeMarker != undefined) {
                            geocodeMarker.remove();
                        };

                        //Add a marker to show where you clicked.
                        geocodeMarker = L.marker([msg.Lat, msg.Long]).addTo(projectFirmaMap.map);
                        projectFirmaMap.map.flyTo([msg.Lat, msg.Long], 12);
                    } else {
                        console.log(msg.ErrorStatus);
                        alert(msg.ErrorStatus);
                    }

                });
            }

        });

        jQuery('#showBasinwideProjectsToast').on("click", function() {
            jQuery("#mapPanel").removeClass("col-md-12");
            jQuery("#mapPanel").addClass("col-md-8");

            jQuery("#projectsWithLocationAreaToast").addClass("col-md-4");
            jQuery("#projectsWithLocationAreaToast").show();
            jQuery("#showBasinwideProjectsToast").hide();
            jQuery("#hideBasinwideProjectsToast").show();
            projectFirmaMap.map.invalidateSize();
        });

        jQuery('#hideBasinwideProjectsToast').on("click", function() {
            jQuery("#mapPanel").removeClass("col-md-8");
            jQuery("#mapPanel").addClass("col-md-12");

            jQuery("#projectsWithLocationAreaToast").removeClass("col-md-4");
            jQuery("#projectsWithLocationAreaToast").hide();
            jQuery("#showBasinwideProjectsToast").show();
            jQuery("#hideBasinwideProjectsToast").hide();
            projectFirmaMap.map.invalidateSize();
        });

    });
</script>
<script type="text/javascript" src="@Url.Content("~/Views/Results/ProjectMapController.js")"></script>
<script type="text/javascript">
    // <![CDATA[
    angular.module("ProjectFirmaApp").factory("angularModelAndViewData",
        function() {
            return {
                "AngularModel": "",
                "AngularViewData": @Html.Raw(JObject.FromObject(ViewDataTyped.ProjectMapViewDataForAngular).ToString(Formatting.None))
            };
        });
    angular.bootstrap(jQuery("[ng-controller=\"ProjectMapController\"]"), ["ProjectFirmaApp"]);
    // ]]>
</script>