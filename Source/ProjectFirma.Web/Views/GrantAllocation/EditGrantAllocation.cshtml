@*-----------------------------------------------------------------------
    <copyright file="EditProject.cshtml" company="Tahoe Regional Planning Agency and Environmental Science Associates">
    Copyright (c) Tahoe Regional Planning Agency and Environmental Science Associates. All rights reserved.
    <author>Environmental Science Associates</author>
    </copyright>

    <license>
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

    Source code is available upon request via <support@sitkatech.com>.
    </license>
    -----------------------------------------------------------------------*@
@using LtInfo.Common.BootstrapWrappers
@using LtInfo.Common.HtmlHelperExtensions
@using LtInfo.Common.Models
@using Newtonsoft.Json.Linq
@using ProjectFirma.Web.Common
@using ProjectFirma.Web.Controllers
@using ProjectFirma.Web.Models
@using ProjectFirma.Web.Views.GrantAllocation
@using ProjectFirma.Web.Views.ProgramIndex
@using ProjectFirma.Web.Views.ProjectCode
@using LtInfo.Common.Mvc
@using ProjectFirma.Web.Views.ProjectUpdate
@inherits ProjectFirma.Web.Views.GrantAllocation.EditGrantAllocation



@Html.ValidationSummary()

<script type="text/javascript" src="~/Views/GrantAllocation/EditGrantAllocationController.js"></script>
<script type="text/javascript" src="/Content/Bootstrap-select/bootstrap-select.min.js"></script>
<link rel="stylesheet" href="/Content/Bootstrap-select/bootstrap-select.min.css" type="text/css" />
<script type="text/javascript">
    // <![CDATA[

    var initialAllocationAmount = @this.Model.AllocationAmount

    jQuery(document).ready(function () {
        jQuery("#@Html.IdFor(m => m.DivisionID)").on("change", function () {
            if (jQuery(this).val() > 0) {
                jQuery("#@Html.IdFor(m => m.DNRUplandRegionID)").prop("disabled", true);
                //console.log("divisionID is greater than 0:" + jQuery(this).val());
            } else {
                jQuery("#@Html.IdFor(m => m.DNRUplandRegionID)").prop("disabled", false);
                //console.log("divisionID is NOT greater than 0:" + jQuery(this).val());
            }
        });

        jQuery("#@Html.IdFor(m => m.DNRUplandRegionID)").on("change", function() {
            if (jQuery(this).val() > 0) {
                jQuery("#@Html.IdFor(m => m.DivisionID)").prop("disabled", true);
                //console.log("dnrUplandRegionID is greater than 0:" + jQuery(this).val());
            } else {
                jQuery("#@Html.IdFor(m => m.DivisionID)").prop("disabled", false);
                //console.log("dnrUplandRegionID is NOT greater than 0:" + jQuery(this).val());
            }
        });

        jQuery("#@Html.IdFor(m => m.GrantAllocationChangeLogNote)").prop("disabled", true);
        jQuery("#@Html.IdFor(m => m.AllocationAmount)").on("change", function() {
            if (jQuery(this).val() != initialAllocationAmount) {
                jQuery("#@Html.IdFor(m => m.GrantAllocationChangeLogNote)").prop("disabled", false);
                //console.log("dnrUplandRegionID is greater than 0:" + jQuery(this).val());
            } else {
                jQuery("#@Html.IdFor(m => m.GrantAllocationChangeLogNote)").prop("disabled", true);
                //console.log("dnrUplandRegionID is NOT greater than 0:" + jQuery(this).val());
            }
        });
        jQuery(":radio.likely-to-use").on("change", function () {
            if (jQuery(this).val() == "False") {
                jQuery("#@Html.IdFor(m => m.LikelyToUsePeopleIds)").prop("disabled", true);
                jQuery(".likely-to-use-people-dropdown").prop("disabled", true);
                jQuery(".likely-to-use-div").css("display", "none");
            } else if (jQuery(this).val() == "True") {
                jQuery("#@Html.IdFor(m => m.LikelyToUsePeopleIds)").prop("disabled", false);
                jQuery(".likely-to-use-people-dropdown").prop("disabled", false);
                jQuery(".likely-to-use-div").css("display", "block");
            } else {
                jQuery("#@Html.IdFor(m => m.LikelyToUsePeopleIds)").prop("disabled", true);
                jQuery(".likely-to-use-people-dropdown").prop("disabled", true);
                jQuery(".likely-to-use-div").css("display", "none");
            }
        });

        jQuery("#@Html.IdFor(m => m.DNRUplandRegionID)").change();
        jQuery("#@Html.IdFor(m => m.DivisionID)").change();
    });
    // ]]>
</script>

<p>If you do not see the contact listed for @FieldDefinition.GrantManager.GetFieldDefinitionLabel(), you can <a href="@ViewDataTyped.AddContactUrl" target="_blank">Add a @FieldDefinition.Contact.GetFieldDefinitionLabel()</a></p>

@using (Html.BeginForm())
{
    <div class="form-horizontal" id="EditGrantAllocationAngularApp" ng-controller="EditGrantAllocationController">

        <div class="form-group">
            <div class="col-xs-3 control-label">
                @Html.LabelWithSugarFor(m => m.GrantModificationID)
            </div>
            <div class="col-xs-6">
                @Html.DropDownListFor(m => m.GrantModificationID, ViewDataTyped.GrantModifications, new { style = "width: auto;", @class = "form-control grantModificationSelectList" })
                @Html.ValidationMessageFor(m => m.GrantModificationID)
            </div>
        </div>

        <div class="form-group">
            <div class="col-xs-3 control-label">
                @Html.LabelWithSugarFor(m => m.GrantAllocationName)
            </div>
            <div class="col-xs-4">
                @Html.TextBoxFor(m => m.GrantAllocationName, new { style = "width: 100%;", @class = "form-control" })
                @Html.ValidationMessageFor(m => m.GrantAllocationName)
            </div>
        </div>
        <div class="form-group">
            <div class="col-xs-3 control-label">
                @Html.LabelWithSugarFor(m => m.OrganizationID)
            </div>
            <div class="col-xs-6">
                @Html.DropDownListFor(m => m.OrganizationID, ViewDataTyped.Organizations, new { style = "width: auto;", @class = "form-control" })
                @Html.ValidationMessageFor(m => m.OrganizationID)
            </div>
        </div>
        <div class="form-group">
            <div class="col-xs-3 control-label">
                @Html.LabelWithSugarFor(m => m.GrantManagerID)
            </div>
            <div class="col-xs-6">
                @Html.SearchableDropDownListFor(m => m.GrantManagerID, ViewDataTyped.GrantManagers, new { style = "width: auto;", @class = "form-control selectpicker" })
                @Html.ValidationMessageFor(m => m.GrantManagerID)
            </div>
        </div>
        <div class="form-group">
            <div class="col-xs-3 control-label">
                @Html.LabelWithSugarFor(m => m.ProgramManagerPersonIDs)
            </div>
            <div class="col-xs-6">
                @Html.SearchableMultiSelectDropDownListFor(m => m.ProgramManagerPersonIDs, ViewDataTyped.ProgramManagersSelectList, new { style = "width: auto;", @class = "form-control selectpicker" })
                @Html.ValidationMessageFor(m => m.ProgramManagerPersonIDs)
            </div>
        </div>
        <div class="form-group">

            <div class="col-xs-3 control-label">
                @Html.LabelWithSugarFor(m => m.ProgramIndexProjectCodeJsons)
            </div>
            <div class="col-xs-3">
                <input id="@ProgramIndexSearchResults.ProgramIndexSearchInputTextboxID" type="text" class="form-control"
                       name="@ProgramIndexSearchResults.ProgramIndexSearchInputTextboxID"
                       placeholder="Search @FieldDefinition.ProgramIndex.GetFieldDefinitionLabel()"
                       style="margin-right: -5px; margin-left: auto;"
                       ng-model="selectedProgramIndexName" />
                <input id="SelectedProgramIndexID" name="SelectedProgramIndexID" type="hidden" ng-model="selectedProgramIndexID" />
            </div>
            <div class="col-xs-3">
                <input id="@ProjectCodeSearchResults.ProjectCodeSearchInputTextboxID" type="text" class="form-control"
                       name="@ProjectCodeSearchResults.ProjectCodeSearchInputTextboxID"
                       placeholder="Search @FieldDefinition.ProjectCode.GetFieldDefinitionLabel()"
                       style="margin-right: -5px; margin-left: auto;"
                       ng-model="selectedProjectCodeName" />
                <input id="SelectedProjectCodeID" name="SelectedProjectCodeID" type="hidden" ng-model="selectedProjectCodeID" />
                @Html.ValidationMessageFor(m => m.ProgramIndexProjectCodeJsons)

            </div>
            <div class="col-xs-3">
                <button type="button" class="btn btn-sm btn-firma" ng-click="addProgramIndexProjectCodePair(selectedProgramIndexID, selectedProgramIndexName, selectedProjectCodeID, selectedProjectCodeName)">
                    <span class="glyphicon glyphicon-plus"></span>
                    Add
                </button>
            </div>

            @*Selections*@
            <div class="col-xs-9 col-xs-offset-3" ng-repeat="currentProgramIndexProjectCodeJson in AngularModel.ProgramIndexProjectCodeJsons" style="margin-top: 5px;">
                <span>
                    <a href="#" ng-click="removeSelectedProgramIndexProjectCodePair(currentProgramIndexProjectCodeJson.ProgramIndexID, currentProgramIndexProjectCodeJson.ProjectCodeID); $event.preventDefault();">
                        <i class="glyphicon glyphicon-trash" title="Remove @FieldDefinition.ProgramIndexProjectCode.GetFieldDefinitionLabel()" alt="Remove @FieldDefinition.ProgramIndexProjectCode.GetFieldDefinitionLabel()"></i>
                    </a>
                </span>
                <span ng-bind="(currentProgramIndexProjectCodeJson.ProgramIndexName) + ' ' + (currentProgramIndexProjectCodeJson.ProjectCodeName)"></span>
            </div>
        </div>
        <div class="form-group">
            <div class="col-xs-3 control-label">
                @Html.LabelWithSugarFor(m => m.FederalFundCodeID)
            </div>
            <div class="col-xs-6">
                @Html.DropDownListFor(m => m.FederalFundCodeID, ViewDataTyped.FederalFundCodes, new { style = "width: auto;", @class = "form-control" })
                @Html.ValidationMessageFor(m => m.FederalFundCodeID)
            </div>
        </div>
        <div class="form-group">
            <div class="col-xs-3 control-label">
                @Html.LabelWithSugarFor(m => m.DNRUplandRegionID)
            </div>
            <div class="col-xs-3">
                @Html.DropDownListFor(m => m.DNRUplandRegionID, ViewDataTyped.Regions, new { style = "width: 100%;", @class = "form-control" })
                @Html.ValidationMessageFor(m => m.DNRUplandRegionID)
            </div>
            <div class="col-xs-2 control-label">
                @Html.LabelWithSugarFor(m => m.DivisionID)
            </div>
            <div class="col-xs-3">
                @Html.DropDownListFor(m => m.DivisionID, ViewDataTyped.Divisions, new { style = "width: 100%;", @class = "form-control" })
                @Html.ValidationMessageFor(m => m.DivisionID)
            </div>
        </div>
        <div class="form-group">
            <div class="col-xs-3 control-label">
                @Html.LabelWithSugarFor(m => m.AllocationAmount)
            </div>
            <div class="col-xs-3">
                @Html.EditorFor(m => m.AllocationAmount, new { style = "width: auto;", @class = "form-control" })
                @Html.ValidationMessageFor(m => m.AllocationAmount)
            </div>
        </div>
        <div class="form-group">
            <div class="col-xs-3 control-label">
                @Html.LabelWithSugarFor(m => m.GrantAllocationChangeLogNote)
            </div>
            <div class="col-xs-8">
                @Html.TextAreaWithMaxLengthFor(m => m.GrantAllocationChangeLogNote, new TextAreaForExtensions.TextAreaDimensions(null, 3), null, new List<string> { "form-control" })
                @Html.ValidationMessageFor(m => m.GrantAllocationChangeLogNote)
            </div>
        </div>
        <div class="form-group">
            <div class="col-xs-3 control-label">
                @Html.LabelWithSugarFor(m => m.StartDate)
            </div>
            <div class="col-xs-3">
                @Html.EditorFor(m => m.StartDate, new { style = "width: 100%;", @class = "form-control" })
                @Html.ValidationMessageFor(m => m.StartDate)
            </div>
            <div class="col-xs-2 control-label">
                @Html.LabelWithSugarFor(m => m.EndDate)
            </div>
            <div class="col-xs-3">
                @Html.EditorFor(m => m.EndDate, new { style = "width: 100%;", @class = "form-control" })
                @Html.ValidationMessageFor(m => m.EndDate)
            </div>
        </div>
    
    <div class="form-group">
        <div class="col-xs-3 control-label">
            @Html.LabelWithSugarFor(m => m.PriorityID)
        </div>
        <div class="col-xs-6">
            @Html.SearchableDropDownListFor(m => m.PriorityID, ViewDataTyped.Priorities, new { style = "width: auto;", @class = "form-control selectpicker" })
            @Html.ValidationMessageFor(m => m.PriorityID)
        </div>
    </div>
    

    <div class="form-group">
            <div class="col-xs-3 control-label">
                @Html.LabelWithSugarFor(m => m.FundFSPsBool)
            </div>
            <div class="col-sm-9">
                <div class="radio-inline">
                    <label>
                        @Html.RadioButtonFor(m => m.FundFSPsBool, true) Yes
                    </label>
                </div>
                <div class="radio-inline">
                    <label>
                        @Html.RadioButtonFor(m => m.FundFSPsBool, false) No
                    </label>
                </div>
                <div class="radio-inline">
                    <label>
                        @Html.RadioButtonFor(m => m.FundFSPsBool, string.Empty, new {@class = "fund-fsps-na"}) N/A
                    </label>
                </div>
                @Html.ValidationMessageFor(m => m.FundFSPsBool)
            </div>
        </div>
        
        <div class="form-group">
            <div class="col-xs-3 control-label">
                @Html.LabelWithSugarFor(m => m.SourceID)
            </div>
            <div class="col-xs-6">
                @Html.DropDownListFor(m => m.SourceID, ViewDataTyped.Sources, new { style = "width: auto;", @class = "form-control" })
                @Html.ValidationMessageFor(m => m.SourceID)
            </div>
        </div>
        
        <div class="form-group">
            <div class="col-xs-3 control-label">
                @Html.LabelWithSugarFor(m => m.LikelyToUsePeopleIds)
            </div>
            <div class="col-xs-6">
                <div>
                    @*class="col-sm-9"*@
                    <div class="radio-inline">
                        <label>
                            @Html.RadioButtonFor(m => m.LikelyToUsePeopleBool, false, new { @class = "likely-to-use" }) Contractual Only
                        </label>
                    </div>
                    <div class="radio-inline">
                        <label>
                            @Html.RadioButtonFor(m => m.LikelyToUsePeopleBool, true, new { @class = "likely-to-use" }) List of Users
                        </label>
                    </div>
                    <div class="radio-inline">
                        <label>
                            @Html.RadioButtonFor(m => m.LikelyToUsePeopleBool, string.Empty, new { @class = "likely-to-use likely-to-use-na" }) N/A
                        </label>
                    </div>
                    <div class="likely-to-use-div">
                        @Html.SearchableMultiSelectDropDownListFor(m => m.LikelyToUsePeopleIds, ViewDataTyped.LikelyPeopleSelectList, new { style = "width: auto;", @class = "form-control selectpicker likely-to-use-people-dropdown" })
                        @Html.ValidationMessageFor(m => m.LikelyToUsePeopleIds)
                    </div>
                    @Html.ValidationMessageFor(m => m.LikelyToUsePeopleBool)
                </div>
                
            </div>
        </div>

        
        @if (ViewDataTyped.EditGrantAllocationType == EditGrantAllocationType.NewGrantAllocation)
        {
            <div class="multiple-file-upload-wrapper">
                <div class="form-group">
                    <div class="col-sm-3 control-label">
                        @Html.LabelWithSugarFor(m => m.GrantAllocationFileResourceDatas)
                    </div>
                    <div class="col-sm-9">
                        <input type="file" ng-file-model="files" multiple name="@Html.NameFor(x => x.GrantAllocationFileResourceDatas)" class="multiple-file-upload" id="@Html.IdFor(x => x.GrantAllocationFileResourceDatas)" />
                        <p class="help-block">Drag and drop or click on the box above to upload files. <br />Allowed Extensions: @Model.GetFileExtensions(x => x.GrantAllocationFileResourceDatas)</p>
                        @Html.ValidationMessageFor(m => m.GrantAllocationFileResourceDatas)
                        <div class="form-horizontal file-inputs" ng-repeat="(key, file) in files">
                            <p class="help-block" style="margin-bottom: 0;"> @BootstrapHtmlHelpers.MakeGlyphIcon("glyphicon-file") {{file.name}}</p>
                        </div>
                    </div>
                </div>
            </div>
        }

        <div ng-repeat="piPcJson in AngularModel.ProgramIndexProjectCodeJsons">
            <input type="hidden" name="@Html.NameFor(x => x.ProgramIndexProjectCodeJsons[0].ProgramIndexID).ToString().Replace("0", "{{$index}}")" value="{{piPcJson.ProgramIndexID}}" />
            <input type="hidden" name="@Html.NameFor(x => x.ProgramIndexProjectCodeJsons[0].ProgramIndexName).ToString().Replace("0", "{{$index}}")" value="{{piPcJson.ProgramIndexName}}" />
            <input type="hidden" name="@Html.NameFor(x => x.ProgramIndexProjectCodeJsons[0].ProjectCodeID).ToString().Replace("0", "{{$index}}")" value="{{piPcJson.ProjectCodeID}}" />
            <input type="hidden" name="@Html.NameFor(x => x.ProgramIndexProjectCodeJsons[0].ProjectCodeName).ToString().Replace("0", "{{$index}}")" value="{{piPcJson.ProjectCodeName}}" />
        </div>
    </div>
    @Html.HiddenFor(m => m.GrantAllocationID)

}



<script type="text/javascript">
    angular.module("ProjectFirmaApp").factory("angularModelAndViewData", function () {
        return {
            AngularModel: @Html.Raw(JObject.FromObject(Model.SerializableClone())),
            AngularViewData: @Html.Raw(JObject.FromObject(ViewDataTyped))
        };
    });
    jQuery(document).ready(function ()
    {
        angular.bootstrap(jQuery("#EditGrantAllocationAngularApp"), ["ProjectFirmaApp"]);

        var scope = angular.element(jQuery("#EditGrantAllocationAngularApp")).scope();

        jQuery("#@ProjectCodeSearchResults.ProjectCodeSearchInputTextboxID")
            .autocomplete({
                source: "@Html.Raw(SitkaRoute<ProjectCodeController>.BuildUrlFromExpression(x => x.FindProjectCode(string.Empty)))",
                minLength: 1,
                position: { my: "right top", at: "right bottom" },
                select: function(event, ui) {
                    //force textbox to display selected value, because angular wont update it until onBlur of input
                    jQuery("#@ProjectCodeSearchResults.ProjectCodeSearchInputTextboxID").val(ui.item.label);
                    //set angular variables so data gets posted back
                    scope.postBackProjectCodeHandler(ui.item.actualValue, ui.item.label);
                    console.log('ui.item.actualValue-ProjectCode: ' + ui.item.actualValue);
                    event.preventDefault();
                },
                html: true
            });

        jQuery("#@ProgramIndexSearchResults.ProgramIndexSearchInputTextboxID")
            .autocomplete({
                source: "@Html.Raw(SitkaRoute<ProgramIndexController>.BuildUrlFromExpression(x => x.FindProgramIndex(string.Empty)))",
                minLength: 1,
                position: { my: "right top", at: "right bottom" },
                select: function(event, ui) {
                    //force textbox to display selected value, because angular wont update it until onBlur of input
                    jQuery("#@ProgramIndexSearchResults.ProgramIndexSearchInputTextboxID").val(ui.item.label);
                    //set angular variables so data gets posted back
                    scope.postBackProgramIndexHandler(ui.item.actualValue, ui.item.label);
                    console.log('ui.item.actualValue-ProgramIndex: ' + ui.item.actualValue);
                    event.preventDefault();
                },
                html: true
            });
        if(@(String.IsNullOrEmpty(Model.FundFSPsBool.ToString()) ? "true" : "false") == true) {
            jQuery(":radio[class='fund-fsps-na']").prop("checked", true)

        }

        if((@(String.IsNullOrEmpty(Model.LikelyToUsePeopleBool.ToString()) ? "true" : "false") == false) && ("@(Model.LikelyToUsePeopleBool.ToString())" == "True")) {
                jQuery("#@Html.IdFor(m => m.LikelyToUsePeopleIds)").prop("disabled", false);
                jQuery(".likely-to-use-people-dropdown").prop("disabled", false);
                jQuery(".likely-to-use-div").css("display", "block");
        } else{
                jQuery("#@Html.IdFor(m => m.LikelyToUsePeopleIds)").prop("disabled", true);
                jQuery(".likely-to-use-people-dropdown").prop("disabled", true);
                jQuery(".likely-to-use-div").css("display", "none");
        }
        if(@(String.IsNullOrEmpty(Model.LikelyToUsePeopleBool.ToString()) ? "true" : "false") == true) {
            jQuery(":radio.likely-to-use-na").prop("checked", true)

        }

    });
    // ]]>
</script>
