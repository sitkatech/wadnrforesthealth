@*-----------------------------------------------------------------------
    <copyright file="Expenditures.cshtml" company="Tahoe Regional Planning Agency and Environmental Science Associates">
    Copyright (c) Tahoe Regional Planning Agency and Environmental Science Associates. All rights reserved.
    <author>Environmental Science Associates</author>
    </copyright>

    <license>
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

    Source code is available upon request via <support@sitkatech.com>.
    </license>
    -----------------------------------------------------------------------*@
@using ProjectFirma.Web.Common
@using ProjectFirma.Web.Models
@using ProjectFirma.Web.Views.ProjectUpdate
@using ProjectFirma.Web.Views.Shared.ExpenditureAndBudgetControls
@using LtInfo.Common
@using LtInfo.Common.HtmlHelperExtensions
@using LtInfo.Common.ModalDialog
@using Newtonsoft.Json.Linq
@inherits Expenditures

@section JavascriptAndStylesContent
{
    @if (ViewDataTyped.IsEditable && ViewDataTyped.AreProjectBasicsValid)
    {
        <script src="@Url.Content("~/Views/ProjectUpdate/ExpendituresController.js")" type="text/javascript"></script>
        <script type="text/javascript">
            // <![CDATA[
            angular.module("ProjectFirmaApp").factory("angularModelAndViewData", function()
            {
                return {
                    AngularModel: @Html.Raw(JObject.FromObject(Model)),
                    AngularViewData: @Html.Raw(JObject.FromObject(ViewDataTyped.ViewDataForAngular))
                };
            });
            // ]]>
        </script>
    }
}

To enter your @FieldDefinition.Project.GetFieldDefinitionLabel()'s annual expenditures, add the appropriate @FieldDefinition.GrantAllocation.GetFieldDefinitionLabelPluralized() and then enter the amount contributed by each for the duration defined by your @FieldDefinition.Project.GetFieldDefinitionLabel()'s Planning / Design Start and @FieldDefinition.CompletionDate.GetFieldDefinitionLabel()
(or, if @FieldDefinition.CompletionDate.GetFieldDefinitionLabel() isn't set, through the current year). If your @FieldDefinition.Project.GetFieldDefinitionLabel() had no expenditures for a given year, enter zero "0" for that year for at least one of its @FieldDefinition.GrantAllocation.GetFieldDefinitionLabelPluralized().
<hr />
<div style="margin: 10px 0">
    <p>
        Other financial information for this @FieldDefinition.Project.GetFieldDefinitionLabel() that might be helpful:
    </p>

    <div style="width: 300px">@FieldDefinition.EstimatedTotalCost.GetFieldDefinitionLabel(): <span style="float: right; font-weight: bold">@ViewDataTyped.ProjectUpdateBatch.ProjectUpdate.EstimatedTotalCost.ToStringCurrency()</span></div>
    <div style="width: 300px">@FieldDefinition.ProjectGrantAllocationRequestTotalAmount.GetFieldDefinitionLabel(): <span style="float: right; font-weight: bold">@ViewDataTyped.ProjectUpdateBatch.ProjectUpdate.GetTotalAmount().ToStringCurrency()</span></div>
</div>

@if (!ViewDataTyped.IsEditable)
{
    ProjectExpendituresDetail.RenderPartialView(Html, ViewDataTyped.ProjectExpendituresDetailViewData);
}
else if (!ViewDataTyped.AreProjectBasicsValid)
{
    <div class="alert alert-danger">
        @FirmaValidationMessages.UpdateSectionIsDependentUponBasicsSection
    </div>
}
else
{
    using (Html.BeginForm())
    {
    <div ng-app="ProjectFirmaApp" id="EditGrantAllocationExpendituresApp" ng-controller="ExpendituresController" style="overflow-x: auto">
        <hr />
        <div style="margin-top: 5px">
            <a style="font-weight: bold; cursor: pointer" ng-click="AngularViewData.ShowNoExpendituresExplanation = !AngularViewData.ShowNoExpendituresExplanation">
                <i ng-class="AngularViewData.ShowNoExpendituresExplanation ? 'glyphicon glyphicon-chevron-up' : 'glyphicon glyphicon-chevron-down'"></i>
                What if the @FieldDefinition.Project.GetFieldDefinitionLabel() has no expenditures to report?
            </a>
            <div ng-show="AngularViewData.ShowNoExpendituresExplanation">
                Select the years for which you have no expenditures to report and provide a brief explanation.
                <a style="cursor: pointer" ng-click="selectAllYears(true)">Select All</a> |
                <a style="cursor: pointer" ng-click="selectAllYears(false)">Unselect All</a>
                <div>
                    <label ng-repeat="projectExemptYearUpdate in AngularModel.ProjectExemptReportingYears | orderBy:'-CalendarYear'" style="padding-right: 10px">
                        <input type="checkbox" ng-model="projectExemptYearUpdate.IsExempt" /> <span ng-bind="projectExemptYearUpdate.CalendarYearDisplay"></span>
                    </label>
                </div>
                @Html.TextAreaFor(x => x.Explanation, new Dictionary<string, object> { { "style", "width:100%" }, { "placeholder", "Explanation here" }, { "ng-model", "AngularModel.Explanation" }, { "class", "form-control" } })

            </div>
        </div>
        <hr />
        <div style="display: inline-block; margin-right: 5px; vertical-align: top">
            @FieldDefinition.GrantAllocation.GetFieldDefinitionLabel() to Add:
        </div>
        <br />
        <div class="input-group">
            <select ng-model="GrantAllocationIDToAdd" 
                    class="selectpicker"
                    data-live-search="true"
                    data-container="body"
                    title="Select a @FieldDefinition.GrantAllocation.GetFieldDefinitionLabel() to Add"
                    data-width="70%">
                <option value="null" disabled selected>Select a @FieldDefinition.GrantAllocation.GetFieldDefinitionLabel() to Add</option>
                <option ng-repeat="grantAllocation in filteredGrantAllocations()"
                        value="{{grantAllocation.GrantAllocationID}}"
                        ng-selected="GrantAllocationIDToAdd == grantAllocation.GrantAllocationID"
                        ng-bind="grantAllocation.DisplayName"
                        data-tokens="{{grantAllocation.DisplayName}}"></option>
            </select>
            <button class="btn btn-firma" type="button" style="margin-left: 5px;" ng-click="addRow()">Add</button>
            <span style="vertical-align: middle; display: inline-block; margin-left: 5px">
                Not listed?
                @ModalDialogFormHelper.ModalDialogFormLink("Contact support", ViewDataTyped.RequestGrantAllocationUrl, "Request Support", 800, "Submit Request", "Cancel", new List<string>(), null, null)
            </span>
            <br />

        </div>
        <label style="font-size: 12px"><input type="checkbox" ng-model="ShowOnlyProjectFunders" /> Show only my @FieldDefinition.Project.GetFieldDefinitionLabel()'s funders</label>
        <hr />
        <div ng-repeat="projectGrantAllocationExpenditure in AngularModel.ProjectGrantAllocationExpenditures | orderBy:[getGrantAllocationName, getProjectName]">
            <span class="glyphicon glyphicon-trash" title="Remove row" alt="Remove row" ng-click="deleteRow(projectGrantAllocationExpenditure)" style="cursor: pointer"></span>
            <label ng-bind="getGrantAllocationName(projectGrantAllocationExpenditure)"></label>
            <table class="table table-responsive table-condensed dialogFormLayout" style="margin-bottom: 25px; display: block; overflow: auto; background-color: #f1f1f1">
                <thead>
                <tr>
                    <th></th>
                    <th ng-repeat="calendarYear in getCalendarYearRange()" style="text-align: right; vertical-align: top">
                        <span class="glyphicon glyphicon-plus-sign blue" ng-click="addCalendarYear(calendarYear + 1)" ng-show="$first" title="Add Next Year '{{calendarYear + 1}}'" alt="Add Next Year '{{calendarYear + 1}}'" style="cursor: pointer"></span>
                        <span ng-bind="formatCalendarYear(calendarYear)"></span>
                        <span class="glyphicon glyphicon-plus-sign blue" ng-click="addCalendarYear(calendarYear - 1)" ng-show="$last" title="Add Previous Year '{{calendarYear - 1}}'" alt="Add Previous Year '{{calendarYear - 1}}'" style="cursor: pointer"></span>
                    </th>
                    <th style="text-align: right">Total</th>
                </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Amount:</td>
                        <td ng-repeat="calendarYearExpenditure in projectGrantAllocationExpenditure.CalendarYearExpenditures | orderBy:'-CalendarYear'">
                            <input style="text-align: right" style="text-align: right" type="text" ng-model="calendarYearExpenditure.MonetaryAmount" class="sitkaCurrency form-control" style="width: 96px;" ng-currency />
                        </td>
                        <td style="text-align: right; font-weight: bold;">
                            {{getExpenditureTotalForRow(projectGrantAllocationExpenditure) | currency:"$"}}
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>

        <div ng-show="AngularModel.ProjectGrantAllocationExpenditures.length > 0">
            <label>Total</label>
            <table class="table table-responsive table-condensed dialogFormLayout" style="margin-bottom: 20px; display: block; overflow: auto; background-color: #f1f1f1">
                <thead>
                    <tr>
                        <th></th>
                        <th ng-repeat="calendarYear in getCalendarYearRange()" style="text-align: right; vertical-align: top">
                            <span class="glyphicon glyphicon-plus-sign blue" ng-click="addCalendarYear(calendarYear + 1)" ng-show="$first" title="Add Next Year '{{calendarYear + 1}}'" alt="Add Next Year '{{calendarYear + 1}}'" style="cursor: pointer"></span>
                            <span ng-bind="formatCalendarYear(calendarYear)"></span>
                            <span class="glyphicon glyphicon-plus-sign blue" ng-click="addCalendarYear(calendarYear - 1)" ng-show="$last" title="Add Previous Year '{{calendarYear - 1}}'" alt="Add Previous Year '{{calendarYear - 1}}'" style="cursor: pointer"></span>
                        </th>
                        <th style="text-align: right">Total</th>
                    </tr>
                </thead>
                <tbody>
                    <tr style="font-weight: bold;">
                        <td>All @FieldDefinition.GrantAllocation.GetFieldDefinitionLabel()s:</td>
                        <td ng-repeat="calendarYear in getCalendarYearRange()" style="text-align: right">
                            {{getExpenditureTotalForCalendarYear(calendarYear) | currency:"$"}}
                        </td>
                        <td style="text-align: right">
                            {{getExpenditureTotalForCalendarYear() | currency:"$"}}
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>

        <div ng-repeat="projectGrantAllocationExpenditure in AngularModel.ProjectGrantAllocationExpenditures | orderBy:[getGrantAllocationName]">
            <input type="hidden" name="@Html.NameFor(x => x.ProjectGrantAllocationExpenditures[0].ProjectID).ToString().Replace("0", "{{$index}}")" value="{{projectGrantAllocationExpenditure.ProjectID}}" />
            <input type="hidden" name="@Html.NameFor(x => x.ProjectGrantAllocationExpenditures[0].GrantAllocationID).ToString().Replace("0", "{{$index}}")" value="{{projectGrantAllocationExpenditure.GrantAllocationID}}" />
            <div ng-repeat="calendarYearExpenditure in projectGrantAllocationExpenditure.CalendarYearExpenditures | orderBy:'CalendarYear'">
                <input type="hidden" name="@Html.NameFor(x => x.ProjectGrantAllocationExpenditures[0].CalendarYearExpenditures[1].CalendarYear).ToString().Replace("0", "{{$parent.$index}}").Replace("1", "{{$index}}")" value="{{calendarYearExpenditure.CalendarYear}}" />
                <input type="hidden" name="@Html.NameFor(x => x.ProjectGrantAllocationExpenditures[0].CalendarYearExpenditures[1].MonetaryAmount).ToString().Replace("0", "{{$parent.$index}}").Replace("1", "{{$index}}")" value="{{calendarYearExpenditure.MonetaryAmount}}" />
            </div>
        </div>
        <div ng-repeat="projectExemptYear in AngularModel.ProjectExemptReportingYears">
            <input type="hidden" name="@Html.NameFor(x => x.ProjectExemptReportingYears[0].CalendarYear).ToString().Replace("0", "{{$index}}")" value="{{projectExemptYear.CalendarYear}}" />
            <input type="hidden" name="@Html.NameFor(x => x.ProjectExemptReportingYears[0].CalendarYearDisplay).ToString().Replace("0", "{{$index}}")" value="{{projectExemptYear.CalendarYearDisplay}}" />
            <input type="hidden" name="@Html.NameFor(x => x.ProjectExemptReportingYears[0].ProjectID).ToString().Replace("0", "{{$index}}")" value="{{projectExemptYear.ProjectID}}" />
            <input type="hidden" name="@Html.NameFor(x => x.ProjectExemptReportingYears[0].ProjectExemptReportingYearID).ToString().Replace("0", "{{$index}}")" value="{{projectExemptYear.ProjectExemptReportingYearID}}" />
            <input type="hidden" name="@Html.NameFor(x => x.ProjectExemptReportingYears[0].IsExempt).ToString().Replace("0", "{{$index}}")" value="{{projectExemptYear.IsExempt}}" />
        </div>

        @if (ViewDataTyped.ShowApproveAndReturnButton)
        {
            <hr />
            <div class="row form-group">
                <div class="col-md-3">@Html.LabelWithSugarFor(x => x.Comments)</div>
                <div class="col-md-9">
                    @Html.TextAreaFor(x => x.Comments, new Dictionary<string, object> { { "style", "width: 100%" }, { "class", "form-control" } })
                </div>
            </div>
        }
        <hr />
        @{ SectionComments.RenderPartialView(Html, ViewDataTyped.SectionCommentsViewData); }
        <div class="row">
            <div class="col-xs-6">
                @ModalDialogFormHelper.ModalDialogFormLink("revert-button", "Revert Current Page", ViewDataTyped.RefreshUrl, "Refresh this section", 500, "Continue", "Continue", "Cancel", new List<string> { "btn btn-xs btn-firma" }, null, null, null, "Undo all changes on this page", false)
                @if (ViewDataTyped.UpdateStatus.IsExpendituresUpdated)
                {
                    @ModalDialogFormHelper.ModalDialogFormLink("diff-link-id", "Show Changes", ViewDataTyped.DiffUrl, string.Format("Changes to {0} Expenditures", FieldDefinition.Project.GetFieldDefinitionLabel()), 800, "hidden-save-button", string.Empty, "Close", new List<string> { "btn btn-xs btn-firma" }, null, null, null)
                }
            </div>
            <div style="text-align: right; white-space: nowrap">
                <button type="submit" class="btn btn-xs btn-firma" title="Save changes made on this page" value="false" name="@Html.NameFor(x => x.AutoAdvance)" ng-disabled="pmForm.$invalid">Save</button>
                <button type="submit" class="btn btn-xs btn-firma" title="Save changes and continue to next page" value="true" name="@Html.NameFor(x => x.AutoAdvance)" ng-disabled="pmForm.$invalid">Save &amp; Continue<span class='glyphicon glyphicon-chevron-right'></span></button>
            </div>
        </div>

    </div>
    }
}

<script type="text/javascript">
    //<![CDATA[
    jQuery(function () { HookupCheckIfFormIsDirty(undefined, ".submitProject"); });
    // ]]>
</script>