@*-----------------------------------------------------------------------
<copyright file="ExpectedFunding.cshtml" company="Tahoe Regional Planning Agency">
Copyright (c) Tahoe Regional Planning Agency. All rights reserved.
<author>Environmental Science Associates</author>
</copyright>

<license>
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

Source code is available upon request via <support@sitkatech.com>.
</license>
-----------------------------------------------------------------------*@
@using DocumentFormat.OpenXml.Wordprocessing
@using ProjectFirma.Web.Models
@using LtInfo.Common.HtmlHelperExtensions
@using LtInfo.Common.ModalDialog
@using Newtonsoft.Json.Linq
@inherits ProjectFirma.Web.Views.ProjectCreate.ExpectedFunding

@section JavascriptAndStylesContent
{
    <script src="@Url.Content("~/Views/ProjectCreate/ExpectedFundingController.js")" type="text/javascript"></script>
    <script type="text/javascript">
        // <![CDATA[
        angular.module("ProjectFirmaApp").factory("angularModelAndViewData", function()
        {
            return {
                AngularModel: @Html.Raw(JObject.FromObject(Model)),
                AngularViewData: @Html.Raw(JObject.FromObject(ViewDataTyped.ViewDataForAngular))
            };
        });
        // ]]>
    </script>

}
    <p>Enter the expected funding for your @FieldDefinition.Project.GetFieldDefinitionLabel(). You may enter @FieldDefinition.GrantAllocation.GetFieldDefinitionLabelPluralized(). For each @FieldDefinition.GrantAllocation.GetFieldDefinitionLabel(), provide the amount of funding that has been secured, and the amount that is targeted but not yet secured. If the amount of secured or unsecured funding is unknown, you can leave the amounts blank.</p>
    <p>The Unfunded Need is the difference between the @FieldDefinition.Project.GetFieldDefinitionLabel()'s Estimated Total Cost and the Secured Funding.</p>

<hr />

@using (Html.BeginForm())
{
    <div ng-app="ProjectFirmaApp" ng-controller="ExpectedFundingController">
        <div class="form-group row">
            <div class="col-md-4 text-right" >@Html.LabelWithSugarFor(m => m.ProjectEstimatedTotalCost)</div>
            <div class="col-md-8">
                @Html.EditorFor(m => m.ProjectEstimatedTotalCost)
                @Html.ValidationMessageFor(x => x.ProjectEstimatedTotalCost)
            </div>
        </div>
        <div class="form-group row">
            <div class="col-md-4 text-right" >@Html.LabelWithSugarFor(m => m.FundingSourceIDs)</div>
            <div class="col-md-8">
                @Html.CheckBoxListFor(m => m.FundingSourceIDs, ViewDataTyped.FundingSources, new { style = "display:block" }, CheckboxExtensions.ColNumber.twoCols)
                @Html.ValidationMessageFor(x => x.FundingSourceIDs)
            </div>
        </div>
        <div class="form-group row">
            <div class="col-md-4 text-right" >@Html.LabelWithSugarFor(m => m.ProjectFundingSourceNotes)</div>
            <div class="col-md-8">
                @Html.TextAreaFor(m => m.ProjectFundingSourceNotes, new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.ProjectFundingSourceNotes)
            </div>
        </div>
        <hr/>
        <div class="form-group">
            <label class="control-label">@FieldDefinition.GrantAllocation.GetFieldDefinitionLabel() to Add:</label>
            <div class="input-group">
                <select ng-model="GrantAllocationToAdd"
                        data-live-search="true"
                        data-container="body"
                        data-title="Select a Grant Allocation to Add"
                        data-width="100%" class="selectpicker"
                        data-ng-options="grantAllocation as grantAllocation.DisplayName for grantAllocation in filteredGrantAllocations() track by grantAllocation.GrantAllocationID">
                    <option value="null" disabled selected>Select a @FieldDefinition.GrantAllocation.GetFieldDefinitionLabel() to Add</option>
                </select>
                <span class="input-group-btn">
                    <button class="btn btn-firma" type="button" ng-click="addRow()">
                        <span class="glyphicon glyphicon-plus"></span> Add
                    </button>
                </span>
            </div>
            <p style="font-size: 12px;">
                Grant Allocation not listed?
                @ModalDialogFormHelper.ModalDialogFormLink("Contact support", ViewDataTyped.RequestGrantAllocationUrl, "Request Support", 800, "Submit Request", "Cancel", new List<string>(), null, null)
            </p>
        </div>
        <div style="overflow-x: auto" class="form-inline">
            <table class="table" style="margin-top: 20px; overflow: scroll" ng-show="AngularModel.ProjectGrantAllocationRequestSimples.length > 0">
                <tr>
                    <th></th>
                    <th>@Html.LabelWithSugarFor(FieldDefinition.GrantAllocation)</th>
                    <th style="text-align: right">@Html.LabelWithSugarFor(FieldDefinition.ProjectGrantAllocationRequestTotalAmount)</th>
                    <th style="text-align: right">Total</th>
                </tr>
                <tr ng-repeat="projectGrantAllocationRequest in AngularModel.ProjectGrantAllocationRequestSimples | orderBy:[getGrantAllocationName]">
                    <td>
                        <span class="glyphicon glyphicon-trash blue" title="Remove row" alt="Remove row" ng-click="deleteRow(projectGrantAllocationRequest)" style="cursor: pointer"></span>
                    </td>
                    <td ng-bind="getGrantAllocationName(projectGrantAllocationRequest)"></td>
                    <td style="text-align: right">
                        <input type="text" style="text-align: right" ng-model="projectGrantAllocationRequest.TotalAmount" class="sitkaCurrency form-control " ng-currency/>
                    </td>
                    <th style="text-align: right">
                        {{ getRowTotal(projectGrantAllocationRequest) | currency:"$"}}
                    </th>
                </tr>
                <tr>
                    <th colspan="2">Total</th>
                    <th style="text-align: right">
                        {{ getColumnTotal() | currency:"$"}}
                    </th>
                    <th style="text-align: right">
                        {{ getTotal() | currency:"$"}}
                    </th>
                </tr>
            </table>
        </div>


        <div ng-repeat="projectGrantAllocationRequest in AngularModel.ProjectGrantAllocationRequestSimples | orderBy:[getGrantAllocationName]">
            <input type="hidden" name="@Html.NameFor(x => x.ProjectGrantAllocationRequestSimples[0].ProjectID).ToString().Replace("0", "{{$index}}")" value="{{projectGrantAllocationRequest.ProjectID}}"/>
            <input type="hidden" name="@Html.NameFor(x => x.ProjectGrantAllocationRequestSimples[0].GrantAllocationID).ToString().Replace("0", "{{$index}}")" value="{{projectGrantAllocationRequest.GrantAllocationID}}"/>
            <input type="hidden" name="@Html.NameFor(x => x.ProjectGrantAllocationRequestSimples[0].TotalAmount).ToString().Replace("0", "{{$index}}")" value="{{projectGrantAllocationRequest.TotalAmount}}"/>
        </div>
        <hr/>

        <div style="margin: 10px 0px; padding: 5px 10px;">
            <p>
                <label class="control-label">Summary of Total @FieldDefinition.Project.GetFieldDefinitionLabel() Costs and Funding:</label>
            </p>

            <div class="row">
                <div class="col-sm-4">@Html.LabelWithSugarFor(FieldDefinition.EstimatedTotalCost):</div>
                <div class="col-sm-3 text-right">
                    <span>
                        {{ AngularViewData.EstimatedTotalCost | currency:"$"}}
                    </span>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-4">@Html.LabelWithSugarFor(FieldDefinition.ProjectGrantAllocationRequestTotalAmount):</div>
                <div class="col-sm-3 text-right">
                    <span>
                        {{getColumnTotal() | currency:"$"}}
                    </span>
                </div>
            </div>
        </div>
    </div>
}

<div class="row">
    <div class="col-xs-12">
        <hr />
        <div class="pull-right">
            <button type="button" class="btn btn-xs btn-firma" onclick="saveForm(false)">Save</button>
            <button type="button" class="btn btn-xs btn-firma" onclick="saveForm(true)">Save &amp; Continue<span class='glyphicon glyphicon-chevron-right'></span></button>
        </div>
    </div>
</div>
<script type="text/javascript">
    // <![CDATA[

    jQuery(function () {
        HookupCheckIfFormIsDirty(undefined, ".submitProject");
    });

    function saveForm(autoAdvance) {
        var form = jQuery("form");
        // Do not submit if the form
        // does not pass client side validation

        if (!form.valid()) {
            return false;
        }
        form.append('<input type="hidden" name="@Html.NameFor(x => x.AutoAdvance)" value=' + autoAdvance + ' />');
        var noMeasuresDiv = jQuery("#ExplanationForNoMeasuresDiv");
        noMeasuresDiv.appendTo(form);

        form.trigger("submit");
    }

    // ]]>
</script>