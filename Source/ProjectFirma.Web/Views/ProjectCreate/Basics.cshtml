@*-----------------------------------------------------------------------
    <copyright file="Basics.cshtml" company="Tahoe Regional Planning Agency and Environmental Science Associates">
    Copyright (c) Tahoe Regional Planning Agency and Environmental Science Associates. All rights reserved.
    <author>Environmental Science Associates</author>
    </copyright>

    <license>
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

    Source code is available upon request via <support@sitkatech.com>.
    </license>
    -----------------------------------------------------------------------*@
@using LtInfo.Common.HtmlHelperExtensions
@using Newtonsoft.Json.Linq
@using ProjectFirma.Web.Common
@using ProjectFirma.Web.Models
@using ProjectFirma.Web.Views.Shared
@inherits ProjectFirma.Web.Views.ProjectCreate.Basics

@section JavascriptAndStylesContent
{
    <style>
        .row {
            margin-top: 5px;
        }
    </style>

    <script src="~/Views/Shared/ProjectControls/EditProjectController.js"></script>
    <script type="text/javascript">
        // <![CDATA[
        jQuery(function() {
            angular.module("ProjectFirmaApp").factory("angularModelAndViewData",
                function() {
                    return {
                        "AngularModel": @Html.Raw(JObject.FromObject(Model)),
                        "AngularViewData": @Html.Raw(JObject.FromObject(ViewDataTyped.BasicsViewDataForAngular))
                    };
                });
            angular.bootstrap(jQuery("#EditProjectApp"), ["ProjectFirmaApp"]);

            jQuery(".selectpicker").selectpicker("refresh");
            jQuery(".modal").on("hidden.bs.modal",
                function() {
                    jQuery(".bootstrap-select.open").removeClass("open");
                });


            HookupCheckIfFormIsDirty(undefined, ".submitProject");

            // Bypass the "Could not parse a blank value" error
            jQuery("#ProjectTypeID option.bs-title-option").val(-1);


        });
        // ]]>
    </script>

}
<div>
    @{ ViewPageContent.RenderPartialView(Html, ViewDataTyped.InstructionsViewPageContentViewData); }
</div>
<hr />
<div id="EditProjectApp" ng-controller="EditProjectController">
    @using (Html.BeginForm())
    {
        <div class="form-horizontal">
            <div class="form-group">


                <div class="col-xs-12 col-sm-4 control-label">
                    @Html.LabelWithSugarFor(m => m.ProjectTypeID, 600, MultiTenantHelpers.GetProjectTypeDisplayNameForProject())
                </div>
                <div class="col-xs-12 col-sm-8">
                    @Html.SearchableDropDownListFor(x => x.ProjectTypeID, ViewDataTyped.ProjectTypes)
                    @Html.ValidationMessageFor(m => m.ProjectTypeID)
                </div>

                @if (ViewDataTyped.ProjectTypeHasBeenSet)
                {
                    <div class="col-xs-12 col-sm-offset-4 col-sm-8"> <em>Warning: Changing the Project Type may delete previously entered data that doesn't apply to a different Project Type.</em></div>
                }
            </div>
            <div class="form-group">
                <div class="col-xs-12 col-sm-4 control-label">
                    @Html.LabelWithSugarFor(m => m.ProjectName)
                </div>
                <div class="col-xs-12 col-sm-8">
                    @Html.TextBoxFor(m => m.ProjectName, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.ProjectName)
                </div>
            </div>
            <div class="form-group">
                <div class="col-xs-12 col-sm-4 control-label">
                    @Html.LabelWithSugarFor(m => m.ProjectDescription, false)
                </div>
                <div class="col-xs-12 col-sm-8">
                    @Html.TextAreaWithMaxLengthFor(m => m.ProjectDescription, new TextAreaForExtensions.TextAreaDimensions(null, 8), null, new List<string> { "form-control" }, false)
                    @Html.ValidationMessageFor(m => m.ProjectDescription)
                </div>
            </div>

            <div class="form-group">
                <div class="col-xs-12 col-sm-4 control-label">
                    @Html.LabelWithSugarFor(m => m.ProjectStageID, true)
                </div>
                <div class="col-xs-12 col-sm-8">
                    @if (ViewDataTyped.IsEditable)
                    {
                        @Html.DropDownListFor(m => m.ProjectStageID, ViewDataTyped.ProjectStages, new { @class = "form-control", style = "width: auto;" })
                        @Html.ValidationMessageFor(m => m.ProjectStageID)
                    }
                    else
                    {
                        @ViewDataTyped.ProjectStage.ProjectStageDisplayName
                    }
                </div>
                </div>
            <div class="form-group">
                <div class="col-xs-12 col-sm-4 control-label">
                    @Html.LabelWithSugarFor(m => m.PlannedDate)
                </div>
                <div class="col-xs-12 col-sm-8">
                    @Html.EditorFor(m => m.PlannedDate, new { @class = "form-control", style = "width: auto;" })
                    @Html.ValidationMessageFor(m => m.PlannedDate)
                </div>
            </div>
            <div class="form-group">
                <div class="col-xs-12 col-sm-4 control-label">
                    @Html.LabelWithSugarFor(m => m.ExpirationDate)
                </div>
                <div class="col-xs-12 col-sm-8">
                    @Html.EditorFor(m => m.ExpirationDate, new Dictionary<string, object>() { { "style", "width: auto" }, { "class", "form-control" } })
                    @Html.ValidationMessageFor(m => m.ExpirationDate)
                </div>
            </div>
            <div class="form-group">
                <div class="col-xs-12 col-sm-4 control-label">
                    @Html.LabelWithSugarFor(m => m.CompletionDate)
                </div>
                <div class="col-xs-12 col-sm-8">
                    @Html.EditorFor(m => m.CompletionDate, new { @class = "form-control", style = "width: auto;" })
                    @Html.ValidationMessageFor(m => m.CompletionDate)
                </div>
            </div>
            <div class="form-group">
                <div id="focusAreaDiv" class="col-xs-12 col-sm-4 control-label">
                    @Html.LabelWithSugarFor(m => m.FocusAreaID)
                </div>
                <div class="col-xs-12 col-sm-8">
                    @Html.DropDownListFor(m => m.FocusAreaID, ViewDataTyped.FocusAreas, new { @class = "form-control", style = "width: auto;" })
                    @Html.ValidationMessageFor(m => m.FocusAreaID)
                </div>
            </div>



            <div class="form-group">
                <div class="col-xs-4 control-label">
                    <strong>@FieldDefinition.Program.GetFieldDefinitionLabel() to Add: </strong>
                </div>
                <div class="col-xs-8">
                    <div class="input-group">
                        <select ng-model="ProgramIDToAdd"
                                class="selectpicker"
                                data-live-search="true"
                                data-container="body"
                                title="Select a @FieldDefinition.Program.GetFieldDefinitionLabel() to Add"
                                data-width="100%">
                            <option value="-1" selected>Select a Program to Add</option>
                            <option ng-repeat="program in filteredPrograms()"
                                    value="{{program.ProgramID}}"
                                    ng-selected="ProgramIDToAdd == program.ProgramIDToAdd"
                                    ng-bind="program.DisplayString"
                                    data-tokens="{{program.DisplayString}}"></option>
                        </select>
                        <span class="input-group-btn">
                            <button class="btn btn-firma" type="button" ng-click="addRow()">
                                <span class="glyphicon glyphicon-plus"></span> Add
                            </button>
                        </span>
                    </div>
                </div>
            </div>

            <div class="form-group">

                <div class="row narrowRow">
                    <div class="col-xs-4 control-label">
                        @Html.Raw(Html.LabelWithSugarFor(FieldDefinition.Program))<strong>s</strong>
                    </div>
                    <div class="col-xs-8 col-xs-offset-4" ng-repeat="projectProgram in AngularModel.ProjectProgramSimples | orderBy:[getProgramName]">

                        <span class="glyphicon glyphicon-trash blue" title="Remove row" alt="Remove row" ng-click="deleteRow(projectProgram)" style="cursor: pointer"></span>
                        <span ng-bind="projectProgram.DisplayString"></span>
                    </div>
                </div>

                
            </div>
            
            <div class="form-group">
                <div class="col-xs-4 control-label">
                    @Html.LabelWithSugarFor(m => m.PercentageMatch)
                </div>
                <div class="col-xs-8">
                    @Html.EditorFor(m => m.PercentageMatch, new {  
                        htmlAttributes = new { 
                            min="0", max="100"
                        } 
                    })
                    @Html.ValidationMessageFor(m => m.PercentageMatch)
                </div>
            </div>


        </div>
        <div ng-repeat="projectProgram in AngularModel.ProjectProgramSimples">
            <input type="hidden" name="@Html.NameFor(x => x.ProjectProgramSimples[0].ProjectID).ToString().Replace("0", "{{$index}}")" value="{{projectProgram.ProjectID}}" />
            <input type="hidden" name="@Html.NameFor(x => x.ProjectProgramSimples[0].ProgramID).ToString().Replace("0", "{{$index}}")" value="{{projectProgram.ProgramID}}" />
            <input type="hidden" name="@Html.NameFor(x => x.ProjectProgramSimples[0].ProjectProgramID).ToString().Replace("0", "{{$index}}")" value="{{projectProgram.ProjectProgramID}}" />
            <input type="hidden" name="@Html.NameFor(x => x.ProjectProgramSimples[0].DisplayString).ToString().Replace("0", "{{$index}}")" value="{{projectProgram.DisplayString}}" />
        </div>
        @Html.HiddenFor(m => m.ProjectID)
        @Html.HiddenFor(m => m.ImportExternalProjectStagingID)

        <hr />
        <div class="pull-right">
            <button type="submit" class="btn btn-xs btn-firma" value="false" name="@Html.NameFor(x => x.AutoAdvance)">Save</button>
            <button type="submit" class="btn btn-xs btn-firma" value="true" name="@Html.NameFor(x => x.AutoAdvance)">Save &amp; Continue<span class='glyphicon glyphicon-chevron-right'></span></button>
        </div>
    }
</div>

    <script type="text/javascript">
    jQuery(document)
        .ready(function() {
            // Get the invoice approval status, return true if the comment field is mandatory (when denial happens, comment is mandatory)
            var isInvoiceCommentFieldMandatory = function () {
                var selectedInvoiceApprovalStatus = jQuery("#ProjectTypeID option:selected").text();
                // Only Invoices with an InvoiceApprovalStatus of 'Denied' have mandatory comment field
                if (selectedInvoiceApprovalStatus == 'Fuels Reduction') {
                    return true;
                } else {
                    return false;
                }
            }

            var initialLoadCommentIsMandatory = isInvoiceCommentFieldMandatory();
            if (initialLoadCommentIsMandatory) {
                jQuery("#focusAreaDiv")
                    .html('@Html.LabelWithSugarFor(m => m.FocusAreaID, true)');
            } else {
                jQuery("#focusAreaDiv")
                    .html('@Html.LabelWithSugarFor(m => m.FocusAreaID, false)');
            }

            jQuery("#ProjectTypeID").on('change', function () {
                var commentIsMandatory = isInvoiceCommentFieldMandatory();
                if (commentIsMandatory) {
                    jQuery("#focusAreaDiv")
                        .html('@Html.LabelWithSugarFor(m => m.FocusAreaID, true)');
                } else {
                    jQuery("#focusAreaDiv")
                        .html('@Html.LabelWithSugarFor(m => m.FocusAreaID, false)');
                }
            });
        });
    </script>
